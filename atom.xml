<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>秀才</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-16T03:39:16.363Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>chimps</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>索引</title>
    <link href="http://yoursite.com/mysql/index/"/>
    <id>http://yoursite.com/mysql/index/</id>
    <published>2018-10-16T03:25:02.781Z</published>
    <updated>2018-10-16T03:39:16.363Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查询索引"><a href="#查询索引" class="headerlink" title="查询索引"></a>查询索引</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> &#123;<span class="keyword">INDEX</span> | <span class="keyword">INDEXES</span> | <span class="keyword">KEYS</span>&#125;</span><br><span class="line">    &#123;<span class="keyword">FROM</span> | <span class="keyword">IN</span>&#125; tbl_name</span><br><span class="line">    [&#123;<span class="keyword">FROM</span> | <span class="keyword">IN</span>&#125; db_name]</span><br><span class="line">    [<span class="keyword">WHERE</span> expr]</span><br></pre></td></tr></table></figure><p>例子：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">INDEX</span> <span class="keyword">FROM</span> mydb.mytable;</span><br></pre></td></tr></table></figure></p><p>字段较多时，竖着看更清晰<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">INDEX</span> <span class="keyword">FROM</span> mydb.mytable\G;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> authority;</span><br></pre></td></tr></table></figure></p><h2 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h2><p>直通车：<a href="https://dev.mysql.com/doc/refman/5.7/en/create-index.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/create-index.html</a><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">UNIQUE</span> | FULLTEXT | SPATIAL] <span class="keyword">INDEX</span> index_name</span><br><span class="line">    [index_type]</span><br><span class="line">    <span class="keyword">ON</span> tbl_name (key_part,...)</span><br><span class="line">    [index_option]</span><br><span class="line">    [algorithm_option | lock_option] ...</span><br><span class="line"></span><br><span class="line">key_part:</span><br><span class="line">    col_name [(<span class="keyword">length</span>)] [<span class="keyword">ASC</span> | <span class="keyword">DESC</span>]</span><br><span class="line"></span><br><span class="line">index_option:</span><br><span class="line">    KEY_BLOCK_SIZE [=] <span class="keyword">value</span></span><br><span class="line">  | index_type</span><br><span class="line">  | <span class="keyword">WITH</span> PARSER parser_name</span><br><span class="line">  | <span class="keyword">COMMENT</span> <span class="string">'string'</span></span><br><span class="line"></span><br><span class="line">index_type:</span><br><span class="line">    <span class="keyword">USING</span> &#123;BTREE | <span class="keyword">HASH</span>&#125;</span><br><span class="line"></span><br><span class="line">algorithm_option:</span><br><span class="line">    ALGORITHM [=] &#123;<span class="keyword">DEFAULT</span> | INPLACE | COPY&#125;</span><br><span class="line"></span><br><span class="line">lock_option:</span><br><span class="line">    <span class="keyword">LOCK</span> [=] &#123;<span class="keyword">DEFAULT</span> | <span class="keyword">NONE</span> | <span class="keyword">SHARED</span> | EXCLUSIVE&#125;</span><br></pre></td></tr></table></figure></p><p>例子：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> id_index <span class="keyword">ON</span> lookup (<span class="keyword">id</span>) <span class="keyword">USING</span> BTREE;</span><br></pre></td></tr></table></figure></p><h2 id="删除索引："><a href="#删除索引：" class="headerlink" title="删除索引："></a>删除索引：</h2><p>语法使用的alert，比较复杂，只放一个链接吧<br><a href="https://dev.mysql.com/doc/refman/5.7/en/alter-table.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/alter-table.html</a></p><p>例子：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> authority <span class="keyword">drop</span> <span class="keyword">index</span> UQE_authority_page;</span><br></pre></td></tr></table></figure></p><h2 id="联合索引："><a href="#联合索引：" class="headerlink" title="联合索引："></a>联合索引：</h2><p>联合索引又叫复合索引。对于复合索引:Mysql从左到右的使用索引中的字段，一个查询可以只使用索引中的一部份，但只能是最左侧部分。例如索引是key index (a,b,c). 可以支持a | a,b| a,b,c 3种组合进行查找，但不支持 b,c进行查找 .当最左侧字段是常量引用时，索引就十分有效。</p><p>例子：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> authority;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> authority <span class="keyword">drop</span> <span class="keyword">index</span> UQE_authority_page;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">index</span> UQE_authority_page <span class="keyword">on</span> authority(company_id,page);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;查询索引&quot;&gt;&lt;a href=&quot;#查询索引&quot; class=&quot;headerlink&quot; title=&quot;查询索引&quot;&gt;&lt;/a&gt;查询索引&lt;/h2&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>拼接新的变量名</title>
    <link href="http://yoursite.com/linux/eval/"/>
    <id>http://yoursite.com/linux/eval/</id>
    <published>2018-10-16T02:56:40.061Z</published>
    <updated>2018-10-16T03:16:35.407Z</updated>
    
    <content type="html"><![CDATA[<p>##shell变量作为另一个变量名</p><p>使用eval<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">i=1</span><br><span class="line"><span class="built_in">eval</span> <span class="built_in">echo</span> <span class="string">'$'</span>rediscache<span class="variable">$i</span></span><br></pre></td></tr></table></figure></p><h2 id="例1："><a href="#例1：" class="headerlink" title="例1："></a>例1：</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dev@pirate-test:~chimps (master *%) $ i=1                                                                                                              </span><br><span class="line">dev@pirate-test:~chimps (master *%) $ <span class="built_in">eval</span> <span class="built_in">echo</span> <span class="string">'$'</span>rediscache<span class="variable">$i</span></span><br><span class="line">10.100.100.100</span><br></pre></td></tr></table></figure><h2 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line">for ((i = 1; i &lt; 60; i++)); do</span><br><span class="line">redis=$(eval echo &apos;$&apos;rediscache$i)</span><br><span class="line">count=$(redis-cli -h $redis -a ***** DEL key1)</span><br><span class="line">echo &#123;idx:,$i,redis:,$redis,count:,$count&#125;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##shell变量作为另一个变量名&lt;/p&gt;
&lt;p&gt;使用eval&lt;br&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span c
      
    
    </summary>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="shell" scheme="http://yoursite.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>优秀一点点</title>
    <link href="http://yoursite.com/digest/%E5%BC%82%E7%B1%BB%E6%91%98%E5%BD%95/"/>
    <id>http://yoursite.com/digest/异类摘录/</id>
    <published>2018-10-11T14:32:35.445Z</published>
    <updated>2018-10-11T14:37:43.037Z</updated>
    
    <content type="html"><![CDATA[<p>在社会学领域，所谓成功就是“优势积累”的结果。</p><p>职业冰球队员一开始只比最初所在球队的队友好一点点，然而这微小的优势带来的机遇，扩大了他和那些队友之间的差距，随后差距与机会交替发挥作用，微小的差距被越拉越大——最终被选中的队员成了真正出众的天才。</p><p>由此可以看出，天才并非一开始就表现出众，一开始他只是比别人优秀那么一点点。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在社会学领域，所谓成功就是“优势积累”的结果。&lt;/p&gt;
&lt;p&gt;职业冰球队员一开始只比最初所在球队的队友好一点点，然而这微小的优势带来的机遇，扩大了他和那些队友之间的差距，随后差距与机会交替发挥作用，微小的差距被越拉越大——最终被选中的队员成了真正出众的天才。&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
      <category term="有趣的灵魂" scheme="http://yoursite.com/tags/%E6%9C%89%E8%B6%A3%E7%9A%84%E7%81%B5%E9%AD%82/"/>
    
  </entry>
  
  <entry>
    <title>承认病态的自我</title>
    <link href="http://yoursite.com/digest/%E5%B0%91%E6%9C%89%E4%BA%BA%E8%B5%B0%E7%9A%84%E8%B7%AF%E6%91%98%E5%BD%952/"/>
    <id>http://yoursite.com/digest/少有人走的路摘录2/</id>
    <published>2018-10-11T14:31:21.832Z</published>
    <updated>2018-10-11T14:37:58.908Z</updated>
    
    <content type="html"><![CDATA[<p>承认病态的自我需要勇气，佛教有一句名言：海无边，回头是岸</p><p>圣人改变的是自己，走的是一条修行的路。通过完善自己，可以感召别人，唤醒别人的良知，给别人指引。</p><p>与之相反，由于大恶之人害怕改变自己，所以便去改变别人，他们不择手段去控制别人，压制别人，甚至毁灭别人的生命。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;承认病态的自我需要勇气，佛教有一句名言：海无边，回头是岸&lt;/p&gt;
&lt;p&gt;圣人改变的是自己，走的是一条修行的路。通过完善自己，可以感召别人，唤醒别人的良知，给别人指引。&lt;/p&gt;
&lt;p&gt;与之相反，由于大恶之人害怕改变自己，所以便去改变别人，他们不择手段去控制别人，压制别人，甚至
      
    
    </summary>
    
    
      <category term="有趣的灵魂" scheme="http://yoursite.com/tags/%E6%9C%89%E8%B6%A3%E7%9A%84%E7%81%B5%E9%AD%82/"/>
    
  </entry>
  
  <entry>
    <title>放弃自由</title>
    <link href="http://yoursite.com/digest/%E5%B0%91%E6%9C%89%E4%BA%BA%E8%B5%B0%E7%9A%84%E8%B7%AF%E6%91%98%E5%BD%951/"/>
    <id>http://yoursite.com/digest/少有人走的路摘录1/</id>
    <published>2018-10-11T14:29:52.839Z</published>
    <updated>2018-10-11T14:38:05.972Z</updated>
    
    <content type="html"><![CDATA[<p>今天读的一章为：过分依赖集体，个人的心智就会退化</p><p>推理很到位：</p><p>“自然赋予人自由意志，也就是赋予了人自主选择的权利。人生是有一个接一个的选择组成的，不同的选择导致不同的人生。但是不可否认的是，伴随着自主选择，人也就多了更多的烦恼和痛苦。选择是一件令人烦恼和痛苦的事情。首先选择意味着放弃。选择一条路，意味着放弃其他的路；有了一个选择，意味着要放弃其他选择。由于人们不愿意放弃，所以每当面临选择时，内心总是充满烦恼和痛苦。其次，选择会产生结果，人们必须为自己的选择负责，并承受选择所带来的结果。当然，好的结果令人欣喜，但坏的结果不仅会招致别人的指责、埋怨，也会让自己陷入懊恼和自责之中，令人痛苦不堪。许多人不愿意承受选择所带来的痛苦，便会把自主选择的权利拱手让给他人。这就是弗洛姆所说的逃避自由。</p><p>逃避自由的人放弃了自主选择的权利，也就放弃了独立思考的能力，这意味着他们将失去独立的自我，失去自己的灵魂。一个没有灵魂的人就像一张破碎的纸片，盲目地追随着每一阵风，完全失去了掌控自我的能力，最终会成为魔鬼撒旦的工具，干出许多邪恶的事情。”</p><p>我感觉说的很对，想想和以前和朋友一块儿的时候，有什么事情都是让对方做选择，虽然会让别人会觉得你随和，为他人着想。实际上是自己太多胆小，不敢承担选择所带来的风险。是因为怕，才放弃了自主思考的权利，给人一种没有底气，没有底线的感觉。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天读的一章为：过分依赖集体，个人的心智就会退化&lt;/p&gt;
&lt;p&gt;推理很到位：&lt;/p&gt;
&lt;p&gt;“自然赋予人自由意志，也就是赋予了人自主选择的权利。人生是有一个接一个的选择组成的，不同的选择导致不同的人生。但是不可否认的是，伴随着自主选择，人也就多了更多的烦恼和痛苦。选择是一件
      
    
    </summary>
    
    
      <category term="有趣的灵魂" scheme="http://yoursite.com/tags/%E6%9C%89%E8%B6%A3%E7%9A%84%E7%81%B5%E9%AD%82/"/>
    
  </entry>
  
  <entry>
    <title>人性的弱点摘录</title>
    <link href="http://yoursite.com/digest/%E4%BA%BA%E6%80%A7%E7%9A%84%E5%BC%B1%E7%82%B9%E6%91%98%E5%BD%95/"/>
    <id>http://yoursite.com/digest/人性的弱点摘录/</id>
    <published>2018-10-11T14:28:41.639Z</published>
    <updated>2018-10-11T14:29:06.571Z</updated>
    
    <content type="html"><![CDATA[<p>在与人相处时，要切记：与我们交往的不是纯粹按道理或逻辑生活的人，而是充满了感情的，带有偏见、傲慢和虚荣的人。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在与人相处时，要切记：与我们交往的不是纯粹按道理或逻辑生活的人，而是充满了感情的，带有偏见、傲慢和虚荣的人。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="有趣的灵魂" scheme="http://yoursite.com/tags/%E6%9C%89%E8%B6%A3%E7%9A%84%E7%81%B5%E9%AD%82/"/>
    
  </entry>
  
  <entry>
    <title>定时任务</title>
    <link href="http://yoursite.com/linux/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <id>http://yoursite.com/linux/定时任务/</id>
    <published>2018-10-09T03:45:25.101Z</published>
    <updated>2018-10-09T09:19:48.957Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本规则"><a href="#基本规则" class="headerlink" title="基本规则"></a>基本规则</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">minute   hour   day   month   week   <span class="built_in">command</span></span><br><span class="line"></span><br><span class="line">- minute： 表示分钟，可以是从0到59之间的任何整数。</span><br><span class="line">- hour：表示小时，可以是从0到23之间的任何整数。</span><br><span class="line">- day：表示日期，可以是从1到31之间的任何整数。</span><br><span class="line">- month：表示月份，可以是从1到12之间的任何整数。</span><br><span class="line">- week：表示星期几，可以是从0到7之间的任何整数，这里的0或7代表星期日。</span><br><span class="line">- <span class="built_in">command</span>：要执行的命令，可以是系统命令，也可以是自己编写的脚本文件。</span><br></pre></td></tr></table></figure><h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">星号（*）：代表所有可能的值，例如month字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作。</span><br><span class="line">逗号（,）：可以用逗号隔开的值指定一个列表范围，例如，“1,2,5,7,8,9”</span><br><span class="line">中杠（-）：可以用整数之间的中杠表示一个整数范围，例如“2-6”表示“2,3,4,5,6”</span><br><span class="line">正斜线（/）：可以用正斜线指定时间的间隔频率，例如“0-23/2”表示每两小时执行一次。同时正斜线可以和星号一起使用，例如*/10，如果用在minute字段，表示每十分钟执行一次。</span><br></pre></td></tr></table></figure><h2 id="编辑定时任务"><a href="#编辑定时任务" class="headerlink" title="编辑定时任务"></a>编辑定时任务</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">crontab  -e</span><br><span class="line">*  *  *  *  *       命令</span><br></pre></td></tr></table></figure><h2 id="查看系统定时任务"><a href="#查看系统定时任务" class="headerlink" title="查看系统定时任务"></a>查看系统定时任务</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab  -l</span><br></pre></td></tr></table></figure><h2 id="删除定时任务"><a href="#删除定时任务" class="headerlink" title="删除定时任务"></a>删除定时任务</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab  -r</span><br></pre></td></tr></table></figure><h2 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h2><p>/sbin/service crond start    //启动服务<br>/sbin/service crond stop     //关闭服务<br>/sbin/service crond restart  //重启服务<br>/sbin/service crond reload   //重新载入配置</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>每1分钟执行一次command<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* * * * * <span class="built_in">command</span></span><br></pre></td></tr></table></figure></p><p>每小时的第3和第15分钟执行<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3,15 * * * * <span class="built_in">command</span></span><br></pre></td></tr></table></figure></p><p>在上午8点到11点的第3和第15分钟执行<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3,15 8-11 * * * <span class="built_in">command</span></span><br></pre></td></tr></table></figure></p><p>每隔两天的上午8点到11点的第3和第15分钟执行<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3,15 8-11 */2 * * <span class="built_in">command</span></span><br></pre></td></tr></table></figure></p><p>每个星期一的上午8点到11点的第3和第15分钟执行<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3,15 8-11 * * 1 <span class="built_in">command</span></span><br></pre></td></tr></table></figure></p><p>每晚的21:30重启smb<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">30 21 * * * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure></p><p>每月1、10、22日的4 : 45重启smb<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">45 4 1,10,22 * * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure></p><p>每周六、周日的1:10重启smb<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10 1 * * 6,0 /etc/init.d/smb restart</span><br></pre></td></tr></table></figure></p><p>每天18 : 00至23 : 00之间每隔30分钟重启smb<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0,30 18-23 * * * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure></p><p>每星期六的晚上11:00 pm重启smb<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 23 * * 6 /etc/init.d/smb restart</span><br></pre></td></tr></table></figure></p><p>每一小时重启smb<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* */1 * * * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure></p><p>晚上11点到早上7点之间，每隔一小时重启smb<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* 23-7/1 * * * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure></p><p>每月的4号与每周一到周三的11点重启smb<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 11 4 * mon-wed /etc/init.d/smb restart</span><br></pre></td></tr></table></figure></p><p>一月一号的4点重启smb<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 4 1 jan * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本规则&quot;&gt;&lt;a href=&quot;#基本规则&quot; class=&quot;headerlink&quot; title=&quot;基本规则&quot;&gt;&lt;/a&gt;基本规则&lt;/h2&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="shell" scheme="http://yoursite.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>MySQL max_allowed_packet设置</title>
    <link href="http://yoursite.com/mysql/max_allowed_packet/"/>
    <id>http://yoursite.com/mysql/max_allowed_packet/</id>
    <published>2018-10-08T15:19:12.066Z</published>
    <updated>2018-10-08T15:28:50.919Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是max-allowed-packet"><a href="#什么是max-allowed-packet" class="headerlink" title="什么是max_allowed_packet"></a>什么是max_allowed_packet</h2><p>max_allowed_packet是mysql允许插入一条数据的大小</p><h2 id="查看目前配置"><a href="#查看目前配置" class="headerlink" title="查看目前配置"></a>查看目前配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show VARIABLES like <span class="string">'%max_allowed_packet%'</span>;</span></span><br><span class="line">+--------------------------+------------+</span><br><span class="line">| Variable_name            | Value      |</span><br><span class="line">+--------------------------+------------+</span><br><span class="line">| max_allowed_packet       | 16777216   |</span><br><span class="line">| slave_max_allowed_packet | 1073741824 |</span><br><span class="line">+--------------------------+------------+</span><br><span class="line">2 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><h2 id="修改方法"><a href="#修改方法" class="headerlink" title="修改方法"></a>修改方法</h2><ol><li><p>编辑<code>my.cnf</code>文件</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">max_allowed_packet</span>=<span class="number">20</span>M</span><br></pre></td></tr></table></figure><p>保存重启mysql</p><p>如果找不到<code>my.cnf</code>，可以通过命令：<code>mysql --help | grep my.cnf</code></p></li><li><p>在mysql 命令行中运行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> global max_allowed_packet = 2*1024*1024*10</span><br></pre></td></tr></table></figure><p>然后关闭掉这此mysql server链接，再进入</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是max-allowed-packet&quot;&gt;&lt;a href=&quot;#什么是max-allowed-packet&quot; class=&quot;headerlink&quot; title=&quot;什么是max_allowed_packet&quot;&gt;&lt;/a&gt;什么是max_allowed_packet&lt;/
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>HTTP 上传 下载</title>
    <link href="http://yoursite.com/golang/http%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/"/>
    <id>http://yoursite.com/golang/http上传下载/</id>
    <published>2018-10-07T17:34:25.349Z</published>
    <updated>2018-10-07T17:40:02.010Z</updated>
    
    <content type="html"><![CDATA[<h2 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取form文件</span></span><br><span class="line">file, err := c.FormFile(<span class="string">"attachment"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, GenError(err)</span><br><span class="line">&#125;</span><br><span class="line">now := time.Now()</span><br><span class="line"><span class="comment">// 检查目录</span></span><br><span class="line">dir := fmt.Sprintf(<span class="string">"upload/%d%d"</span>, now.Year(), now.Month())</span><br><span class="line"><span class="keyword">if</span> !utils.Exists(dir) &#123;</span><br><span class="line">err = os.MkdirAll(dir, os.ModePerm)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, GenError(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建文件</span></span><br><span class="line">path := fmt.Sprintf(<span class="string">"%s/%d%s"</span>, dir, now.Unix()%(<span class="number">3600</span>*<span class="number">24</span>*<span class="number">30</span>), file.Filename)</span><br><span class="line">out, err := os.Create(path)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, GenError(err)</span><br><span class="line">&#125;</span><br><span class="line">f, err := file.Open()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, GenError(err)</span><br><span class="line">&#125;</span><br><span class="line">_, err = io.Copy(out, f)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, GenError(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">file, err := os.Open(attachment.Path)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">OnError(c, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取文件头信息</span></span><br><span class="line">fileHeader := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">512</span>)</span><br><span class="line">file.Read(fileHeader)</span><br><span class="line">fileContentType := http.DetectContentType(fileHeader)</span><br><span class="line">fileStat, _ := file.Stat()</span><br><span class="line">fileSize := strconv.FormatInt(fileStat.Size(), <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置response header头，gin框架也可以用c.Header("","")</span></span><br><span class="line">c.Writer.Header().Set(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment; filename="</span>+attachment.Name)</span><br><span class="line">c.Writer.Header().Set(<span class="string">"Content-Type"</span>, fileContentType)</span><br><span class="line">c.Writer.Header().Set(<span class="string">"Content-Length"</span>, fileSize)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意还原io读取指针</span></span><br><span class="line">file.Seek(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">_, err = io.Copy(c.Writer, file)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">OnError(c, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;上传&quot;&gt;&lt;a href=&quot;#上传&quot; class=&quot;headerlink&quot; title=&quot;上传&quot;&gt;&lt;/a&gt;上传&lt;/h2&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
    
      <category term="go" scheme="http://yoursite.com/tags/go/"/>
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>文摘</title>
    <link href="http://yoursite.com/digest/%E6%96%87%E6%91%98/"/>
    <id>http://yoursite.com/digest/文摘/</id>
    <published>2018-09-28T09:43:29.728Z</published>
    <updated>2018-10-07T17:42:19.462Z</updated>
    
    <content type="html"><![CDATA[<h1 id="做人难"><a href="#做人难" class="headerlink" title="做人难"></a>做人难</h1><blockquote><p>“  海浪卷走了小孩的鞋子，小孩在海滩上写下：大海是小偷！一个男人在海里打捞出了一些好东西，在沙滩上写到：大海真慷慨！ 一少年溺水身亡，他的母亲在海边写了：大海是凶手！ 一个老翁打捞到了珍珠，他写到：大海真仁慈！ …这时一个海浪冲上来抹去了所有的字， 大海平静地说：如果你想成为大海， 就不要在意别人对你的评说！ 因为你做不到让所有人满意。人生如果容易的话，你当初来到这个世界时就不会从哭泣开始！  ” 共勉</p></blockquote><h1 id="喜欢"><a href="#喜欢" class="headerlink" title="喜欢"></a>喜欢</h1><blockquote><p>有一个民谣青年曾说：最单纯的喜欢就是，就算你拒绝了我，我对你也永远没有埋怨。但我不会再靠近了。如果你有求于我，我依然会鞠躬尽瘁。从今往后我会把喜欢藏起来，不再招摇过市了，我会努力过得好，希望你也是。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;做人难&quot;&gt;&lt;a href=&quot;#做人难&quot; class=&quot;headerlink&quot; title=&quot;做人难&quot;&gt;&lt;/a&gt;做人难&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;“  海浪卷走了小孩的鞋子，小孩在海滩上写下：大海是小偷！一个男人在海里打捞出了一些好东西，在沙滩上写到：
      
    
    </summary>
    
    
      <category term="有趣的灵魂" scheme="http://yoursite.com/tags/%E6%9C%89%E8%B6%A3%E7%9A%84%E7%81%B5%E9%AD%82/"/>
    
  </entry>
  
  <entry>
    <title>zsh</title>
    <link href="http://yoursite.com/linux/zsh/"/>
    <id>http://yoursite.com/linux/zsh/</id>
    <published>2018-09-25T09:29:51.000Z</published>
    <updated>2018-10-07T07:54:14.204Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装-zsh"><a href="#安装-zsh" class="headerlink" title="安装 zsh"></a>安装 zsh</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install zsh</span><br></pre></td></tr></table></figure><h2 id="oh-my-zsh："><a href="#oh-my-zsh：" class="headerlink" title="oh-my-zsh："></a>oh-my-zsh：</h2><p>摘自：<br><a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">https://github.com/robbyrussell/oh-my-zsh</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure><h2 id="命令高亮"><a href="#命令高亮" class="headerlink" title="命令高亮"></a>命令高亮</h2><p>摘自：<br><a href="https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md" target="_blank" rel="noopener">https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git</span><br><span class="line">echo &quot;source $&#123;(q-)PWD&#125;/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh&quot; &gt;&gt; $&#123;ZDOTDIR:-$HOME&#125;/.zshrc</span><br><span class="line">source ./zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</span><br></pre></td></tr></table></figure><h2 id="可以设置默认sh"><a href="#可以设置默认sh" class="headerlink" title="可以设置默认sh"></a>可以设置默认sh</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装-zsh&quot;&gt;&lt;a href=&quot;#安装-zsh&quot; class=&quot;headerlink&quot; title=&quot;安装 zsh&quot;&gt;&lt;/a&gt;安装 zsh&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="zsh" scheme="http://yoursite.com/tags/zsh/"/>
    
  </entry>
  
  <entry>
    <title>ssh无密码登录</title>
    <link href="http://yoursite.com/linux/ssh/"/>
    <id>http://yoursite.com/linux/ssh/</id>
    <published>2018-09-25T09:29:50.999Z</published>
    <updated>2018-10-09T03:37:30.244Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ssh无密码登录"><a href="#ssh无密码登录" class="headerlink" title="ssh无密码登录"></a>ssh无密码登录</h1><h2 id="公钥认证的基本思想"><a href="#公钥认证的基本思想" class="headerlink" title="公钥认证的基本思想"></a>公钥认证的基本思想</h2><p>对信息的加密和解密采用不同的key，这对key分别称作private key和public key，其中，public key存放在欲登录的服务器上，而private key为特定的客户机所持有。</p><p>当客户机向服务器发出建立安全连接的请求时，首先发送自己的public key，如果这个public key是被服务器所允许的，服务器就发送一个经过public key加密的随机数据给客户机，这个数据只能通过private key解密，客户机将解密后的信息发还给服务器，服务器验证正确后即确认客户机是可信任的，从而建立起一条安全的信息通道。</p><p>通过这种方式，客户机不需要向外发送自己的身份标志“private key”即可达到校验的目的，并且private key是不能通过public key反向推断出来的。这避免了网络窃听可能造成的密码泄露。客户机需要小心的保存自己的private key，以免被其他人窃取，一旦这样的事情发生，就需要各服务器更换受信的public key列表。</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><ul><li><p>用ssh-keygen创建公钥</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@Server1 ~]<span class="comment"># ssh-keygen -t rsa</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key(/root/.ssh/id_rsa):</span><br><span class="line">Created directory <span class="string">'/root/.ssh'</span>.</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved <span class="keyword">in</span>/root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span>/root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">7b:aa:08:a0:99:<span class="built_in">fc</span>:d9:cc:d8:2e:4b:1a:c0:6b:da:e4root@Server1</span><br><span class="line">The key<span class="string">'s randomart image is:</span></span><br><span class="line"><span class="string">+--[ RSA 2048]----+</span></span><br><span class="line"><span class="string">| |</span></span><br><span class="line"><span class="string">| |</span></span><br><span class="line"><span class="string">| |</span></span><br><span class="line"><span class="string">|. |</span></span><br><span class="line"><span class="string">|o. S |</span></span><br><span class="line"><span class="string">|++. . |</span></span><br><span class="line"><span class="string">|+=o. . . |</span></span><br><span class="line"><span class="string">|o+=oB. o |</span></span><br><span class="line"><span class="string">|..E==*... |</span></span><br><span class="line"><span class="string">+-----------------+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">补充说明</span></span><br><span class="line"><span class="string">ssh-keygen:生成秘钥</span></span><br><span class="line"><span class="string">其中：</span></span><br><span class="line"><span class="string">  -t指定算法</span></span><br><span class="line"><span class="string">  -f 指定生成秘钥路径</span></span><br><span class="line"><span class="string">  -N 指定密码</span></span><br></pre></td></tr></table></figure></li><li><p>查看钥匙</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@Server1 ~]<span class="comment"># ls -l .ssh  </span></span><br><span class="line">总用量 8  </span><br><span class="line">-rw-------. 1 root root 1675 12月 10 22:20 id_rsa  </span><br><span class="line">-rw-r--r--. 1 root root 394 12月 10 22:20 id_rsa.pub</span><br></pre></td></tr></table></figure></li><li><p>将公钥复制到被管理机器Server2和Server3下的.ssh目录下（先确保存在这个目录）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@server1 .ssh]<span class="comment"># scp id_rsa.pub root@192.168.1.3:~/.ssh/  </span></span><br><span class="line">The authenticity of host <span class="string">'192.168.1.3(192.168.1.3)'</span> can<span class="string">'t be established.  </span></span><br><span class="line"><span class="string">RSA key fingerprint is93:eb:f9:47:b1:f6:3f:b4:2e:21:c3:d5:ab:1d:ae:65.  </span></span><br><span class="line"><span class="string">Are you sure you want to continueconnecting (yes/no)? yes  </span></span><br><span class="line"><span class="string">Warning: Permanently added '</span>192.168.1.3<span class="string">'(RSA) to the list of known hosts.  </span></span><br><span class="line"><span class="string">root@192.168.1.3'</span>s password:  </span><br><span class="line">id_rsa.pub   </span><br><span class="line">[root@server1 .ssh]<span class="comment"># scp id_rsa.pub root@192.168.1.4:~/.ssh/authorized_keys  </span></span><br><span class="line">The authenticity of host <span class="string">'192.168.1.4(192.168.1.4)'</span> can<span class="string">'t be established.  </span></span><br><span class="line"><span class="string">RSA key fingerprint is93:eb:f9:47:b1:f6:3f:b4:2e:21:c3:d5:ab:1d:ae:65.  </span></span><br><span class="line"><span class="string">Are you sure you want to continueconnecting (yes/no)? yes  </span></span><br><span class="line"><span class="string">Warning: Permanently added '</span>192.168.1.4<span class="string">'(RSA) to the list of known hosts.  </span></span><br><span class="line"><span class="string">root@192.168.1.4'</span>s password:  </span><br><span class="line">id_rsa.pub</span><br></pre></td></tr></table></figure></li><li><p>到Server2和Server3目录下执行下面的命令</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><ul><li><p>设置文件和目录权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 600 authorized_keys</span><br></pre></td></tr></table></figure></li><li><p>验证使用SSH IP地址的方式无密码访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@server1 .ssh]# ssh 192.168.1.3</span><br></pre></td></tr></table></figure></li></ul><h1 id="禁止密码登录"><a href="#禁止密码登录" class="headerlink" title="禁止密码登录"></a>禁止密码登录</h1><p>修改SSH的配置文件/etc/ssh/sshd_config，找到下面1行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PasswordAuthentication yes</span><br></pre></td></tr></table></figure></p><p>修改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PasswordAuthentication no</span><br></pre></td></tr></table></figure></p><p>保存后重启SSH服务。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service sshd restart</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ssh无密码登录&quot;&gt;&lt;a href=&quot;#ssh无密码登录&quot; class=&quot;headerlink&quot; title=&quot;ssh无密码登录&quot;&gt;&lt;/a&gt;ssh无密码登录&lt;/h1&gt;&lt;h2 id=&quot;公钥认证的基本思想&quot;&gt;&lt;a href=&quot;#公钥认证的基本思想&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="ssh" scheme="http://yoursite.com/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>expect交互编程</title>
    <link href="http://yoursite.com/linux/expect/"/>
    <id>http://yoursite.com/linux/expect/</id>
    <published>2018-09-25T09:29:50.999Z</published>
    <updated>2018-10-09T03:53:46.964Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Ubuntu：apt-get install expect</span><br><span class="line">mac: brew install homebrew/dupes/expect</span><br></pre></td></tr></table></figure><h1 id="设置变量"><a href="#设置变量" class="headerlink" title="设置变量"></a>设置变量</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set password  rootddd</span><br></pre></td></tr></table></figure><h1 id="获取参数"><a href="#获取参数" class="headerlink" title="获取参数"></a>获取参数</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set filename [lindex $argv 0]</span><br></pre></td></tr></table></figure><h1 id="一般格式"><a href="#一般格式" class="headerlink" title="一般格式"></a>一般格式</h1><blockquote><p>开头一定要是expect<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/expect</span><br><span class="line"></span><br><span class="line">set filename [lindex $argv 0]</span><br><span class="line">set password  example_pass</span><br><span class="line"># 开始执行命令</span><br><span class="line">spawn ssh root@example.com</span><br><span class="line"># 匹配（如果包含，则执行下面的send）</span><br><span class="line">expect &quot;password:&quot;</span><br><span class="line"># \r回车</span><br><span class="line">send &quot;$password\r&quot;</span><br><span class="line">send &quot;ls\r&quot;</span><br><span class="line">send &quot;exit\r&quot;</span><br><span class="line"># 结束标志</span><br><span class="line">interact</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="expect" scheme="http://yoursite.com/tags/expect/"/>
    
  </entry>
  
  <entry>
    <title>网络管理</title>
    <link href="http://yoursite.com/linux/%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/linux/网络管理/</id>
    <published>2018-09-25T09:29:50.997Z</published>
    <updated>2018-10-09T04:01:14.547Z</updated>
    
    <content type="html"><![CDATA[<h1 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h1><ul><li><p>查看端口状况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -apn</span><br></pre></td></tr></table></figure></li><li><p>查看连接数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 80端口</span><br><span class="line">netstat -nat|grep -i &quot;80&quot;|wc -l</span><br><span class="line">// 已连接上的</span><br><span class="line">netstat -na|grep ESTABLISHED|wc -l</span><br></pre></td></tr></table></figure></li></ul><h1 id="ufw"><a href="#ufw" class="headerlink" title="ufw"></a>ufw</h1><p>(端口管理)</p><ul><li><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ufw</span><br></pre></td></tr></table></figure></li><li><p>开启，默认关闭所有</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw enable </span><br><span class="line">sudo ufw default deny</span><br></pre></td></tr></table></figure></li><li><p>查看端口状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw status</span><br></pre></td></tr></table></figure></li><li><p>新增端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow 8080</span><br></pre></td></tr></table></figure></li><li><p>删除端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw delete allow 8080</span><br></pre></td></tr></table></figure></li><li><p>允许特定来源的访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow from 192.168.1.1</span><br></pre></td></tr></table></figure></li></ul><h1 id="ssh翻墙"><a href="#ssh翻墙" class="headerlink" title="ssh翻墙"></a>ssh翻墙</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">参考：[实战 SSH 端口转发](http://www.ibm.com/developerworks/cn/linux/l-cn-sshforward/)</span><br><span class="line">ssh -D &lt;local port&gt; &lt;SSH Server&gt;</span><br><span class="line">例：</span><br><span class="line">ssh -D 7000 root@xbug.site</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;netstat&quot;&gt;&lt;a href=&quot;#netstat&quot; class=&quot;headerlink&quot; title=&quot;netstat&quot;&gt;&lt;/a&gt;netstat&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;查看端口状况&lt;/p&gt;
&lt;figure class=&quot;highlight plain
      
    
    </summary>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="network" scheme="http://yoursite.com/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>参数</title>
    <link href="http://yoursite.com/http/%E5%8F%82%E6%95%B0/"/>
    <id>http://yoursite.com/http/参数/</id>
    <published>2018-09-25T09:29:50.996Z</published>
    <updated>2018-10-07T07:50:00.609Z</updated>
    
    <content type="html"><![CDATA[<h1 id="url传参"><a href="#url传参" class="headerlink" title="url传参"></a>url传参</h1><blockquote><p>这种在各种method（get，post，delete，put）都能使用，解析速度快</p></blockquote><h1 id="body体中的参数"><a href="#body体中的参数" class="headerlink" title="body体中的参数"></a>body体中的参数</h1><h2 id="application-x-www-form-urlencoded"><a href="#application-x-www-form-urlencoded" class="headerlink" title="application/x-www-form-urlencoded"></a>application/x-www-form-urlencoded</h2><p>这应该是最常见的 POST 提交数据的方式了。浏览器的原生 <form> 表单，如果不设置 enctype 属性，那么最终就会以 application/x-www-form-urlencoded 方式提交数据。请求类似于下面这样（无关的请求头在本文中都省略掉了）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST http://www.example.com HTTP/1.1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded;charset=utf-8</span><br><span class="line"></span><br><span class="line">title=test&amp;sub%5B%5D=1&amp;sub%5B%5D=2&amp;sub%5B%5D=3</span><br></pre></td></tr></table></figure></form></p><p>首先，Content-Type 被指定为 application/x-www-form-urlencoded；其次，提交的数据按照 key1=val1&amp;key2=val2 的方式进行编码，key 和 val 都进行了 URL 转码。大部分服务端语言都对这种方式有很好的支持。例如 PHP 中，$_POST[‘title’] 可以获取到 title 的值，$_POST[‘sub’] 可以得到 sub 数组。<br>很多时候，我们用 Ajax 提交数据时，也是使用这种方式。例如 JQuery 和 QWrap 的 Ajax，Content-Type 默认值都是「application/x-www-form-urlencoded;charset=utf-8」。</p><h2 id="multipart-form-data"><a href="#multipart-form-data" class="headerlink" title="multipart/form-data"></a>multipart/form-data</h2><p>这又是一个常见的 POST 数据提交的方式。我们使用表单上传文件时，必须让 <form> 表单的 enctype 等于 multipart/form-data。直接来看一个请求示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST http://www.example.com HTTP/1.1</span><br><span class="line">Content-Type:multipart/form-data; boundary=----WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br><span class="line">Content-Disposition: form-data; name=&quot;text&quot;</span><br><span class="line"></span><br><span class="line">title</span><br><span class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;chrome.png&quot;</span><br><span class="line">Content-Type: image/png</span><br><span class="line"></span><br><span class="line">PNG ... content of chrome.png ...</span><br><span class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA--</span><br></pre></td></tr></table></figure></form></p><p>这个例子稍微复杂点。首先生成了一个 boundary 用于分割不同的字段，为了避免与正文内容重复，boundary 很长很复杂。然后 Content-Type 里指明了数据是以 multipart/form-data 来编码，本次请求的 boundary 是什么内容。消息主体里按照字段个数又分为多个结构类似的部分，每部分都是以 –boundary 开始，紧接着是内容描述信息，然后是回车，最后是字段具体内容（文本或二进制）。如果传输的是文件，还要包含文件名和文件类型信息。消息主体最后以 –boundary– 标示结束。关于 multipart/form-data 的详细定义，请前往 rfc1867 查看。<br>这种方式一般用来上传文件，各大服务端语言对它也有着良好的支持。<br>上面提到的这两种 POST 数据的方式，都是浏览器原生支持的，而且现阶段标准中原生 <form> 表单也只支持这两种方式（通过 <form> 元素的 enctype 属性指定，默认为 application/x-www-form-urlencoded。其实 enctype 还支持 text/plain，不过用得非常少）。<br>随着越来越多的 Web 站点，尤其是 WebApp，全部使用 Ajax 进行数据交互之后，我们完全可以定义新的数据提交方式，给开发带来更多便利。</form></form></p><h2 id="application-json"><a href="#application-json" class="headerlink" title="application/json"></a>application/json</h2><p>application/json 这个 Content-Type 作为响应头大家肯定不陌生。实际上，现在越来越多的人把它作为请求头，用来告诉服务端消息主体是序列化后的 JSON 字符串。由于 JSON 规范的流行，除了低版本 IE 之外的各大浏览器都原生支持 JSON.stringify，服务端语言也都有处理 JSON 的函数，使用 JSON 不会遇上什么麻烦。<br>JSON 格式支持比键值对复杂得多的结构化数据，这一点也很有用。记得我几年前做一个项目时，需要提交的数据层次非常深，我就是把数据 JSON 序列化之后来提交的。不过当时我是把 JSON 字符串作为 val，仍然放在键值对里，以 x-www-form-urlencoded 方式提交。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST http://www.example.com HTTP/1.1 </span><br><span class="line">Content-Type: application/json;charset=utf-8</span><br><span class="line"></span><br><span class="line">&#123;<span class="attr">"title"</span>:<span class="string">"test"</span>,<span class="attr">"sub"</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]&#125;</span><br></pre></td></tr></table></figure></p><p>这种方案，可以方便的提交复杂的结构化数据，特别适合 RESTful 的接口。各大抓包工具如 Chrome 自带的开发者工具、Firebug、Fiddler，都会以树形结构展示 JSON 数据，非常友好。但也有些服务端语言还没有支持这种方式，例如 php 就无法通过 $_POST 对象从上面的请求中获得内容。这时候，需要自己动手处理下：在请求头中 Content-Type 为 application/json 时，从 php://input 里获得原始输入流，再 json_decode 成对象。一些 php 框架已经开始这么做了。</p><h2 id="text-xml"><a href="#text-xml" class="headerlink" title="text/xml"></a>text/xml</h2><blockquote><p>本人对此格式有成见，就不赘述了。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;url传参&quot;&gt;&lt;a href=&quot;#url传参&quot; class=&quot;headerlink&quot; title=&quot;url传参&quot;&gt;&lt;/a&gt;url传参&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;这种在各种method（get，post，delete，put）都能使用，解析速度快&lt;/p
      
    
    </summary>
    
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>header</title>
    <link href="http://yoursite.com/http/header/"/>
    <id>http://yoursite.com/http/header/</id>
    <published>2018-09-25T09:29:50.995Z</published>
    <updated>2018-10-07T07:50:03.640Z</updated>
    
    <content type="html"><![CDATA[<h1 id="判断客户端编码"><a href="#判断客户端编码" class="headerlink" title="判断客户端编码"></a>判断客户端编码</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">get_os</span><span class="params">($agent = null)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!$agent) $agent = $_SERVER[<span class="string">'HTTP_USER_AGENT'</span>];</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">'/win/i'</span>, $agent) &amp;&amp; preg_match(<span class="string">'/nt 6.0/i'</span>, $agent)) &#123;</span><br><span class="line">            $os = <span class="string">'Windows Vista'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (preg_match(<span class="string">'/win/i'</span>, $agent) &amp;&amp; preg_match(<span class="string">'/nt 6.1/i'</span>, $agent)) &#123;</span><br><span class="line">            $os = <span class="string">'Windows 7'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (preg_match(<span class="string">'/win/i'</span>, $agent) &amp;&amp; preg_match(<span class="string">'/nt 6.2/i'</span>, $agent)) &#123;</span><br><span class="line">            $os = <span class="string">'Windows 8'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (preg_match(<span class="string">'/win/i'</span>, $agent) &amp;&amp; preg_match(<span class="string">'/nt 10.0/i'</span>, $agent)) &#123;</span><br><span class="line">            $os = <span class="string">'Windows 10'</span>;<span class="comment"># 添加win10判断</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (preg_match(<span class="string">'/win/i'</span>, $agent) &amp;&amp; preg_match(<span class="string">'/nt 5.1/i'</span>, $agent)) &#123;</span><br><span class="line">            $os = <span class="string">'Windows XP'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (preg_match(<span class="string">'/win/i'</span>, $agent) &amp;&amp; preg_match(<span class="string">'/nt 5/i'</span>, $agent)) &#123;</span><br><span class="line">            $os = <span class="string">'Windows 2000'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (preg_match(<span class="string">'/win/i'</span>, $agent) &amp;&amp; preg_match(<span class="string">'/nt/i'</span>, $agent)) &#123;</span><br><span class="line">            $os = <span class="string">'Windows NT'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (preg_match(<span class="string">'/win/i'</span>, $agent) &amp;&amp; preg_match(<span class="string">'/32/i'</span>, $agent)) &#123;</span><br><span class="line">            $os = <span class="string">'Windows 32'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (preg_match(<span class="string">'/linux/i'</span>, $agent)) &#123;</span><br><span class="line">            $os = <span class="string">'Linux'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (preg_match(<span class="string">'/unix/i'</span>, $agent)) &#123;</span><br><span class="line">            $os = <span class="string">'Unix'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (preg_match(<span class="string">'/sun/i'</span>, $agent) &amp;&amp; preg_match(<span class="string">'/os/i'</span>, $agent)) &#123;</span><br><span class="line">            $os = <span class="string">'SunOS'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (preg_match(<span class="string">'/ibm/i'</span>, $agent) &amp;&amp; preg_match(<span class="string">'/os/i'</span>, $agent)) &#123;</span><br><span class="line">            $os = <span class="string">'IBM OS/2'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (preg_match(<span class="string">'/Mac/i'</span>, $agent)) &#123;</span><br><span class="line">            $os = <span class="string">'Macintosh'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (preg_match(<span class="string">'/PowerPC/i'</span>, $agent)) &#123;</span><br><span class="line">            $os = <span class="string">'PowerPC'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (preg_match(<span class="string">'/AIX/i'</span>, $agent)) &#123;</span><br><span class="line">            $os = <span class="string">'AIX'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (preg_match(<span class="string">'/HPUX/i'</span>, $agent)) &#123;</span><br><span class="line">            $os = <span class="string">'HPUX'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (preg_match(<span class="string">'/NetBSD/i'</span>, $agent)) &#123;</span><br><span class="line">            $os = <span class="string">'NetBSD'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (preg_match(<span class="string">'/BSD/i'</span>, $agent)) &#123;</span><br><span class="line">            $os = <span class="string">'BSD'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (preg_match(<span class="string">'/OSF1/i'</span>, $agent)) &#123;</span><br><span class="line">            $os = <span class="string">'OSF1'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (preg_match(<span class="string">'/IRIX/i'</span>, $agent)) &#123;</span><br><span class="line">            $os = <span class="string">'IRIX'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (preg_match(<span class="string">'/FreeBSD/i'</span>, $agent)) &#123;</span><br><span class="line">            $os = <span class="string">'FreeBSD'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (preg_match(<span class="string">'/teleport/i'</span>, $agent)) &#123;</span><br><span class="line">            $os = <span class="string">'teleport'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (preg_match(<span class="string">'/flashget/i'</span>, $agent)) &#123;</span><br><span class="line">            $os = <span class="string">'flashget'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (preg_match(<span class="string">'/webzip/i'</span>, $agent)) &#123;</span><br><span class="line">            $os = <span class="string">'webzip'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (preg_match(<span class="string">'/offline/i'</span>, $agent)) &#123;</span><br><span class="line">            $os = <span class="string">'offline'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $os = <span class="string">'未知操作系统'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $os;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="页面输出"><a href="#页面输出" class="headerlink" title="页面输出"></a>页面输出</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">'HTTP/1.1 200 OK'</span>);  <span class="comment">// ok 正常访问</span></span><br><span class="line">header(<span class="string">'HTTP/1.1 404 Not Found'</span>); <span class="comment">//通知浏览器 页面不存在</span></span><br><span class="line">header(<span class="string">'HTTP/1.1 301 Moved Permanently'</span>); <span class="comment">//设置地址被永久的重定向 301</span></span><br><span class="line">header(<span class="string">'Location: http://www.form1.cn/'</span>); <span class="comment">//跳转到一个新的地址</span></span><br><span class="line">header(<span class="string">'Refresh: 10; url=http://www.form1.cn/'</span>); <span class="comment">//延迟转向 也就是隔几秒跳转</span></span><br><span class="line">header(<span class="string">'X-Powered-By: PHP/6.0.0'</span>); <span class="comment">//修改 X-Powered-By信息</span></span><br><span class="line">header(<span class="string">'Content-language: en'</span>); <span class="comment">//文档语言</span></span><br><span class="line">header(<span class="string">'Content-Length: 1234'</span>); <span class="comment">//设置内容长度</span></span><br><span class="line">header(<span class="string">'Last-Modified: '</span>.gmdate(<span class="string">'D, d M Y H:i:s'</span>, $time).<span class="string">' GMT'</span>); <span class="comment">//告诉浏览器最后一次修改时间</span></span><br><span class="line">header(<span class="string">'HTTP/1.1 304 Not Modified'</span>); <span class="comment">//告诉浏览器文档内容没有发生改变</span></span><br></pre></td></tr></table></figure><h1 id="内容输出"><a href="#内容输出" class="headerlink" title="内容输出"></a>内容输出</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">'Content-Type: text/html; charset=utf-8'</span>); <span class="comment">//网页编码 </span></span><br><span class="line">header(<span class="string">'Content-Type: text/plain'</span>); <span class="comment">//纯文本格式 </span></span><br><span class="line">header(<span class="string">'Content-Type: image/jpeg'</span>); <span class="comment">//JPG、JPEG  </span></span><br><span class="line">header(<span class="string">'Content-Type: application/zip'</span>); <span class="comment">// ZIP文件 </span></span><br><span class="line">header(<span class="string">'Content-Type: application/pdf'</span>); <span class="comment">// PDF文件 </span></span><br><span class="line">header(<span class="string">'Content-Type: audio/mpeg'</span>); <span class="comment">// 音频文件  </span></span><br><span class="line">header(<span class="string">'Content-type: text/css'</span>); <span class="comment">//css文件</span></span><br><span class="line">header(<span class="string">'Content-type: text/javascript'</span>); <span class="comment">//js文件</span></span><br><span class="line">header(<span class="string">'Content-type: application/json'</span>);  <span class="comment">//json</span></span><br><span class="line">header(<span class="string">'Content-type: application/pdf'</span>); <span class="comment">//pdf </span></span><br><span class="line">header(<span class="string">'Content-type: text/xml'</span>);  <span class="comment">//xml</span></span><br><span class="line">header(<span class="string">'Content-Type: application/x-shockw**e-flash'</span>); <span class="comment">//Flash动画</span></span><br></pre></td></tr></table></figure><h1 id="声明一个下载文件"><a href="#声明一个下载文件" class="headerlink" title="声明一个下载文件"></a>声明一个下载文件</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">'Content-Type: application/octet-stream'</span>); </span><br><span class="line">header(<span class="string">'Content-Disposition: attachment; filename="ITblog.zip"'</span>); </span><br><span class="line">header(<span class="string">'Content-Transfer-Encoding: binary'</span>); </span><br><span class="line">readfile(<span class="string">'test.zip'</span>);</span><br></pre></td></tr></table></figure><h1 id="对当前文档禁用缓存"><a href="#对当前文档禁用缓存" class="headerlink" title="对当前文档禁用缓存"></a>对当前文档禁用缓存</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">'Cache-Control: no-cache, no-store, max-age=0, must-revalidate'</span>); </span><br><span class="line">header(<span class="string">'Expires: Mon, 26 Jul 1997 05:00:00 GMT'</span>);</span><br></pre></td></tr></table></figure><h1 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">'HTTP/1.1 401 Unauthorized'</span>);  </span><br><span class="line">header(<span class="string">'WWW-Authenticate: Basic realm="Top Secret"'</span>);</span><br></pre></td></tr></table></figure><h1 id="声明一个需要下载的xls文件"><a href="#声明一个需要下载的xls文件" class="headerlink" title="声明一个需要下载的xls文件"></a>声明一个需要下载的xls文件</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">'Content-Disposition: attachment; filename=ithhc.xlsx'</span>);</span><br><span class="line">header(<span class="string">'Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'</span>);</span><br><span class="line">header(<span class="string">'Content-Length: '</span>.filesize(<span class="string">'./test.xls'</span>));  </span><br><span class="line">header(<span class="string">'Content-Transfer-Encoding: binary'</span>);  </span><br><span class="line">header(<span class="string">'Cache-Control: must-revalidate'</span>);  </span><br><span class="line">header(<span class="string">'Pragma: public'</span>);  </span><br><span class="line">readfile(<span class="string">'./test.xls'</span>);</span><br></pre></td></tr></table></figure><h1 id="download"><a href="#download" class="headerlink" title="download"></a>download</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">"Content-type: application/force-download"</span>);</span><br><span class="line"><span class="comment">// 判断编码</span></span><br><span class="line">$use_utf_8 = Utils::get_os() == <span class="string">'Macintosh'</span>;</span><br><span class="line"><span class="keyword">if</span> (!$use_utf_8) &#123;</span><br><span class="line">    <span class="comment">// Disposition中文是处置的意思, 可以理解为文档如何处置</span></span><br><span class="line">    header(<span class="string">"Content-Disposition: attachment;filename="</span> . iconv(<span class="string">"utf-8"</span>, <span class="string">"gb2312//IGNORE"</span>, $zip_title) . <span class="string">".zip"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    header(<span class="string">"Content-Disposition: attachment;filename="</span> . $zip_title . <span class="string">".zip"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> file_get_contents($zip_path);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;判断客户端编码&quot;&gt;&lt;a href=&quot;#判断客户端编码&quot; class=&quot;headerlink&quot; title=&quot;判断客户端编码&quot;&gt;&lt;/a&gt;判断客户端编码&lt;/h1&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g
      
    
    </summary>
    
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
      <category term="header" scheme="http://yoursite.com/tags/header/"/>
    
  </entry>
  
  <entry>
    <title>进程-线程-协程</title>
    <link href="http://yoursite.com/http/%E5%B9%B6%E5%8F%91/"/>
    <id>http://yoursite.com/http/并发/</id>
    <published>2018-09-25T09:29:50.995Z</published>
    <updated>2018-10-07T07:49:57.591Z</updated>
    
    <content type="html"><![CDATA[<h1 id="进程-线程-协程"><a href="#进程-线程-协程" class="headerlink" title="进程-线程-协程"></a>进程-线程-协程</h1><h2 id="简单描述"><a href="#简单描述" class="headerlink" title="简单描述"></a>简单描述</h2><blockquote><p>　　进程、线程和协程之间的关系和区别也困扰我一阵子了，最近有一些心得，写一下。<br>　　进程拥有自己独立的堆和栈，既不共享堆，亦不共享栈，进程由操作系统调度。<br>　　线程拥有自己独立的栈和共享的堆，共享堆，不共享栈，线程亦由操作系统调度(标准线程是的)。<br>　　协程和线程一样共享堆，不共享栈，协程由程序员在协程的代码里显示调度。<br>　　进程和其他两个的区别还是很明显的。<br>　　协程和线程的区别是：协程避免了无意义的调度，由此可以提高性能，但也因此，程序员必须自己承担调度的责任，同时，协程也失去了标准线程使用多CPU的能力。<br>　　打个比方吧，假设有一个操作系统，是单核的，系统上没有其他的程序需要运行，有两个线程 A 和 B ，A 和 B 在单独运行时都需要 10 秒来完成自己的任务，而且任务都是运算操作，A B 之间也没有竞争和共享数据的问题。现在 A B 两个线程并行，操作系统会不停的在 A B 　　两个线程之间切换，达到一种伪并行的效果，假设切换的频率是每秒一次，切换的成本是 0.1 秒(主要是栈切换)，总共需要 20 + 19 <em> 0.1 = 21.9 秒。如果使用协程的方式，可以先运行协程 A ，A 结束的时候让位给协程 B ，只发生一次切换，总时间是 20 + 1 </em> 0.1 = 20.1 秒。如果系统是双核的，而且线程是标准线程，那么 A B 两个线程就可以真并行，总时间只需要 10 秒，而协程的方案仍然需要 20.1 秒。</p></blockquote><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><blockquote><p><code>进程的出现是为了更好的利用CPU资源使到并发成为可能</code>。 假设有两个任务A和B，当A遇到IO操作，CPU默默的等待任务A读取完操作再去执行任务B，这样无疑是对CPU资源的极大的浪费。聪明的老大们就在想若在任务A读取数据时，让任务B执行，当任务A读取完数据后，再切换到任务A执行。注意关键字切换，自然是切换，那么这就涉及到了状态的保存，状态的恢复，加上任务A与任务B所需要的系统资源（内存，硬盘，键盘等等）是不一样的。自然而然的就需要有一个东西去记录任务A和任务B分别需要什么资源，怎样去识别任务A和任务B等等。登登登，进程就被发明出来了。通过进程来分配系统资源，标识任务。如何分配CPU去执行进程称之为调度，进程状态的记录，恢复，切换称之为上下文切换。<code>进程是系统资源分配的最小单位</code>，进程占用的资源有：地址空间，全局变量，文件描述符，各种硬件等等资源。</p></blockquote><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><blockquote><p><code>线程的出现是为了降低上下文切换的消耗，提高系统的并发性，并突破一个进程只能干一样事的缺陷，使到进程内并发成为可能</code>。假设，一个文本程序，需要接受键盘输入，将内容显示在屏幕上，还需要保存信息到硬盘中。若只有一个进程，势必造成同一时间只能干一样事的尴尬（当保存时，就不能通过键盘输入内容）。若有多个进程，每个进程负责一个任务，进程A负责接收键盘输入的任务，进程B负责将内容显示在屏幕上的任务，进程C负责保存内容到硬盘中的任务。这里进程A，B，C间的协作涉及到了进程通信问题，而且有共同都需要拥有的东西——-文本内容，不停的切换造成性能上的损失。若有一种机制，可以使任务A，B，C共享资源，这样上下文切换所需要保存和恢复的内容就少了，同时又可以减少通信所带来的性能损耗，那就好了。是的，这种机制就是线程。<code>线程共享进程的大部分资源，并参与CPU的调度, 当然线程自己也是拥有自己的资源的，例如，栈，寄存器等等</code>。 此时，进程同时也是线程的容器。线程也是有着自己的缺陷的，例如健壮性差，若一个线程挂掉了，整一个进程也挂掉了，这意味着其它线程也挂掉了，进程却没有这个问题，一个进程挂掉，另外的进程还是活着。</p></blockquote><h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><blockquote><p><code>协程通过在线程中实现调度，避免了陷入内核级别的上下文切换造成的性能损失，进而突破了线程在IO上的性能瓶颈</code>。 当涉及到大规模的并发连接时，例如10K连接。以线程作为处理单元，系统调度的开销还是过大。当连接数很多 —&gt; 需要大量的线程来干活 —&gt; 可能大部分的线程处于ready状态 —&gt; 系统会不断地进行上下文切换。既然性能瓶颈在上下文切换，那解决思路也就有了，在线程中自己实现调度，不陷入内核级别的上下文切换。说明一下，在历史上协程比线程要出现得早，在1963年首次提出, 但没有流行开来。为什么没有流行，没有找到信服的资料，先挖个坑，以后那天了解后，再补上。</p></blockquote><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><blockquote><p>进程，线程，协程不断突破，更高效的处理阻塞，不断地提高CPU的利用率。但是并不是说，线程就一定比进程快，而协程就一定不线程要快。具体还是要看应用场景。可以简单粗暴的把应用分为IO密集型应用以及CPU密集型应用。</p></blockquote><ul><li><p>多核CPU，CPU密集型应用</p><blockquote><p>此时多线程的效率是最高的，多线程可以使到全部CPU核心满载，又避免了协程间切换造成性能损失。当CPU密集型任务时，CPU一直在利用着，切换反而会造成性能损失，即便协程上下文切换消耗最小，但也还是有消耗的。</p></blockquote></li><li><p>多核CPU，IO密集型应用</p><blockquote><p>此时采用多线程多协程效率最高，多线程可以使到全部CPU核心满载，而一个线程多协程，则更好的提高了CPU的利用率。</p></blockquote></li><li><p>单核CPU，CPU密集型应用</p><blockquote><p>单进程效率是最高，此时单个进程已经使到CPU满载了。</p></blockquote></li><li><p>单核CPU，IO密集型应用</p><blockquote><p>多协程，效率最高。例如，看了上面应该也是知道的了</p></blockquote></li></ul><h1 id="并发与并行"><a href="#并发与并行" class="headerlink" title="并发与并行"></a>并发与并行</h1><h2 id="并行"><a href="#并行" class="headerlink" title="并行"></a>并行</h2><blockquote><p>并发就是指同一时刻有两个或两个以上的“工作单位”在同时执行，从硬件的角度上来看就是同一时刻有两条或两条以上的指令处于执行阶段。所以，多核是并行的前提，单线程永远无法达到并行状态。可以利用多线程和度进程到达并行状态。另外的，Python的多线程由于GIL的存在，对于Python来说无法通过多线程到达并行状态。</p></blockquote><h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><blockquote><p>对于并发的理解，要从两方面去理解，</p></blockquote><ol><li>并发设计 </li><li><p>并发执行。先说并发设计，当说一个程序是并发的，更多的是指这个程序采取了并发设计。</p></li><li><p>并发设计的标准：</p><blockquote><p><code>使多个操作可以在重叠的时间段内进行</code>，这里的重点在于重叠的时间内， 重叠时间可以理解为一段时间内。例如：在时间1s秒内, 具有IO操作的task1和task2都完成，这就可以说是并发执行。所以呢，单线程也是可以做到并发运行的。当然啦，并行肯定是并发的。一个程序能否并发执行，取决于设计，也取决于部署方式。例如, 当给程序开一个线程（协程是不开的），它不可能是并发的，因为在重叠时间内根本就没有两个task在运行。当一个程序被设计成完成一个任务再去完成下一个任务的时候，即便部署是多线程多协程的也是无法达到并发运行的。</p></blockquote></li></ol><h2 id="并行与并发的关系"><a href="#并行与并发的关系" class="headerlink" title="并行与并发的关系:"></a>并行与并发的关系:</h2><blockquote><p>并发的设计使到并发执行成为可能，而并行是并发执行的其中一种模式。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;进程-线程-协程&quot;&gt;&lt;a href=&quot;#进程-线程-协程&quot; class=&quot;headerlink&quot; title=&quot;进程-线程-协程&quot;&gt;&lt;/a&gt;进程-线程-协程&lt;/h1&gt;&lt;h2 id=&quot;简单描述&quot;&gt;&lt;a href=&quot;#简单描述&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="并发" scheme="http://yoursite.com/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>cookie</title>
    <link href="http://yoursite.com/http/cookie/"/>
    <id>http://yoursite.com/http/cookie/</id>
    <published>2018-09-25T09:29:50.994Z</published>
    <updated>2018-10-07T07:50:06.335Z</updated>
    
    <content type="html"><![CDATA[<h1 id="cookie-是怎么工作的"><a href="#cookie-是怎么工作的" class="headerlink" title="cookie 是怎么工作的"></a>cookie 是怎么工作的</h1><p>当网页要发http请求时，浏览器会先检查是否有相应的<code>cookie</code>，有则自动添加在<code>request header</code>中的<code>cookie</code>字段中。这些是浏览器自动帮我们做的，而且每一次http请求浏览器都会自动帮我们做。这个特点很重要，因为这关系到“<strong>什么样的数据适合存储在cookie中</strong>”。</p><p>存储在cookie中的数据，<code>每次</code>都会被浏览器自动放在<code>http请求</code>中，如果这些数据并不是每个请求都需要发给服务端的数据，浏览器这设置自动处理无疑增加了网络开销；但如果这些数据是每个请求都需要发给服务端的数据（比如身份认证信息），浏览器这设置自动处理就大大免去了重复添加操作。所以对于那设置“每次请求都要携带的信息（最典型的就是身份认证信息）”就特别适合放在cookie中，其他大多数类型的数据就不适合了。</p><h1 id="cookie-属性"><a href="#cookie-属性" class="headerlink" title="cookie 属性"></a>cookie 属性</h1><p>每个cookie都有一定的属性，如什么时候失效，要发送到哪个域名，哪个路径等等。这些属性是通过cookie选项来设置的，cookie选项包括：<code>expires、domain、path、secure、HttpOnly</code>。在设置任一个cookie时都可以设置相关的这些属性，当然也可以不设置，这时会使用这些属性的默认值。在设置这些属性时，属性之间由一个<code>分号和一个空格</code>隔开。代码示例如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"key=name; expires=Thu, 25 Feb 2016 04:18:00 GMT; domain=ppsc.sankuai.com; path=/; secure; HttpOnly"</span></span><br></pre></td></tr></table></figure></p><h2 id="expires"><a href="#expires" class="headerlink" title="expires"></a>expires</h2><p>expires选项用来设置“cookie 什么时间内有效”。expires其实是<code>cookie失效日期</code>，expires必须是 GMT 格式的时间（可以通过 <code>new Date().toGMTString()</code>或者 <code>new Date().toUTCString()</code> 来获得）。</p><p>expires 是 http/1.0协议中的选项，在新的http/1.1协议中expires已经由 <code>max-age</code> 选项代替，两者的作用都是限制cookie 的有效时间。expires的值是一个<code>时间点</code>（<code>cookie失效时刻= expires</code>），而max-age 的值是一个<code>以秒为单位时间段</code>（<code>cookie失效时刻= 创建时刻+ max-age</code>）。<br>另外，max-age 的默认值是 <code>-1</code>(即有效期为 session )；若max-age有三种可能值：负数、0、正数。负数：有效期session；0：删除cookie；正数：有效期为创建时刻+ max-age</p><h2 id="domain-和-path"><a href="#domain-和-path" class="headerlink" title="domain 和 path"></a>domain 和 path</h2><p><code>domain</code>是域名，<code>path</code>是路径，两者加起来就构成了 URL，domain和path一起来限制 cookie 能被哪些 URL 访问。<br>一句话概括：某cookie的 <code>domain为“baidu.com”, path为“/ ”</code>，若请求的URL(URL 可以是js/html/img/css资源请求，但不包括 XHR 请求)的域名是“baidu.com”或其子域如“api.baidu.com”、“dev.api.baidu.com”，且 URL 的路径是“/ ”或子路径“/home”、“/home/login”，则浏览器会将此 cookie 添加到该请求的 cookie 头部中。<br>发生<code>跨域xhr</code>请求时，即使请求URL的域名和路径都满足 cookie 的 domain 和 path，默认情况下cookie也不会自动被添加到请求头部中</p><h2 id="secure"><a href="#secure" class="headerlink" title="secure"></a>secure</h2><p>secure选项用来设置cookie只在确保<code>安全</code>的请求中才会发送。当请求是<code>HTTPS或者其他安全协议</code>时，包含 secure 选项的 cookie 才能被发送至服务器。<br>默认情况下，cookie不会带secure选项(即为<code>空</code>)。所以默认情况下，不管是HTTPS协议还是HTTP协议的请求，cookie 都会被发送至服务端</p><h2 id="httpOnly"><a href="#httpOnly" class="headerlink" title="httpOnly"></a>httpOnly</h2><p>这个选项用来设置<code>cookie是否能通过 js 去访问</code>。<br>默认情况下，cookie不会带httpOnly选项(即为空)，所以默认情况下，客户端是可以通过js代码去访问（包括读取、修改、删除等）这个cookie的。<br>当cookie带httpOnly选项时，客户端则无法通过js代码去访问（包括读取、修改、删除等）这个cookie。</p><h1 id="如何设置cookie"><a href="#如何设置cookie" class="headerlink" title="如何设置cookie"></a>如何设置cookie</h1><h2 id="服务端设置-cookie"><a href="#服务端设置-cookie" class="headerlink" title="服务端设置 cookie"></a>服务端设置 cookie</h2><p>不管你是请求一个资源文件（如 html/js/css/图片），还是发送一个ajax请求，服务端都会返回<code>response</code>。而<code>response header</code>中有一项叫<code>set-cookie</code>，是服务端专门用来设置cookie的。<br><code>一个set-Cookie字段只能设置一个cookie</code>，当你要想设置多个 cookie，需要添加同样多的set-Cookie字段。<br>服务端可以设置cookie 的所有选项：expires、domain、path、secure、HttpOnly</p><h2 id="客户端设置cookie"><a href="#客户端设置cookie" class="headerlink" title="客户端设置cookie"></a>客户端设置cookie</h2><p>客户端可以设置cookie 的下列选项：expires、domain、path、secure（有条件：只有在https协议的网页中，客户端设置secure类型的 cookie 才能成功），但无法设置HttpOnly选项。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;cookie-是怎么工作的&quot;&gt;&lt;a href=&quot;#cookie-是怎么工作的&quot; class=&quot;headerlink&quot; title=&quot;cookie 是怎么工作的&quot;&gt;&lt;/a&gt;cookie 是怎么工作的&lt;/h1&gt;&lt;p&gt;当网页要发http请求时，浏览器会先检查是否有相应的
      
    
    </summary>
    
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
      <category term="cookie" scheme="http://yoursite.com/tags/cookie/"/>
    
  </entry>
  
  <entry>
    <title>cors(跨域)</title>
    <link href="http://yoursite.com/http/%E8%B7%A8%E5%9F%9Fcors/"/>
    <id>http://yoursite.com/http/跨域cors/</id>
    <published>2018-09-25T09:29:50.994Z</published>
    <updated>2018-10-07T07:49:54.809Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘自<a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">阮老师</a><br>CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）</p></blockquote><h1 id="两种请求"><a href="#两种请求" class="headerlink" title="两种请求"></a>两种请求</h1><p>浏览器将CORS请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）。<br>只要同时满足以下两大条件，就属于简单请求。</p><ul><li><p>请求方法是以下三种方法之一：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HEAD</span><br><span class="line">GET</span><br><span class="line">POST</span><br></pre></td></tr></table></figure></li><li><p>HTTP的头信息不超出以下几种字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Accept</span><br><span class="line">Accept-Language</span><br><span class="line">Content-Language</span><br><span class="line">Last-Event-ID</span><br><span class="line">Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain</span><br></pre></td></tr></table></figure></li></ul><h1 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h1><p>对于简单请求，浏览器直接发出CORS请求。具体来说，就是在头信息之中，增加一个Origin字段。<br>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET /cors HTTP/1.1</span><br><span class="line">Origin: http://api.bob.com</span><br><span class="line">Host: api.alice.com</span><br><span class="line">Accept-Language: en-US</span><br><span class="line">Connection: keep-alive</span><br><span class="line">User-Agent: Mozilla/5.0...</span><br></pre></td></tr></table></figure></p><h2 id="不同意"><a href="#不同意" class="headerlink" title="不同意"></a>不同意</h2><p>如果Origin指定的源，不在许可范围内，服务器会返回一个<code>正常的HTTP回应(虽然是拒绝的回应)</code>。浏览器发现，这个回应的头信息没有包含Access-Control-Allow-Origin字段（详见下文），就知道出错了，从而抛出一个错误，被XMLHttpRequest的onerror回调函数捕获。注意，这种错误无法通过状态码识别，因为HTTP回应的状态码有可能是200。</p><h2 id="同意"><a href="#同意" class="headerlink" title="同意"></a>同意</h2><p>如果Origin指定的域名在许可范围内，服务器返回的响应，会多出几个头信息字段。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: http://api.bob.com</span><br><span class="line">Access-Control-Allow-Credentials: true</span><br><span class="line">Access-Control-Expose-Headers: FooBar</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br></pre></td></tr></table></figure></p><h3 id="Access-Control-Allow-Origin"><a href="#Access-Control-Allow-Origin" class="headerlink" title="Access-Control-Allow-Origin"></a>Access-Control-Allow-Origin</h3><p>该字段是必须的。它的值要么是请求时Origin字段的值，要么是一个*，表示接受任意域名的请求。</p><h3 id="Access-Control-Allow-Credentials"><a href="#Access-Control-Allow-Credentials" class="headerlink" title="Access-Control-Allow-Credentials"></a>Access-Control-Allow-Credentials</h3><p>该字段可选。它的值是一个布尔值，表示是否允许发送Cookie。默认情况下，Cookie不包括在CORS请求之中。设为true，即表示服务器明确许可，Cookie可以包含在请求中，一起发给服务器。这个值也只能设为true，如果服务器不要浏览器发送Cookie，删除该字段即可。</p><h3 id="Access-Control-Expose-Headers"><a href="#Access-Control-Expose-Headers" class="headerlink" title="Access-Control-Expose-Headers"></a>Access-Control-Expose-Headers</h3><p>该字段可选。CORS请求时，XMLHttpRequest对象的getResponseHeader()方法只能拿到6个基本字段：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma。<strong>如果想拿到其他字段，就必须在<code>Access-Control-Expose-Headers</code>里面指定</strong>。上面的例子指定，getResponseHeader(‘FooBar’)可以返回FooBar字段的值。</p><h3 id="withCredentials-属性"><a href="#withCredentials-属性" class="headerlink" title="withCredentials 属性"></a>withCredentials 属性</h3><p>上面说到，CORS请求默认不发送Cookie和HTTP认证信息。如果要把Cookie发到服务器，一方面要服务器同意，指定Access-Control-Allow-Credentials字段。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Credentials: true</span><br></pre></td></tr></table></figure></p><p>另一方面，开发者必须在AJAX请求中打开withCredentials属性。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure></p><p>否则，即使服务器同意发送Cookie，浏览器也不会发送。或者，服务器要求设置Cookie，浏览器也不会处理。<br>但是，如果省略withCredentials设置，有的浏览器还是会一起发送Cookie。这时，可以显式关闭withCredentials<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.withCredentials = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure></p><p>需要注意的是，如果要发送Cookie，<strong>Access-Control-Allow-Origin就不能设为星号，必须指定明确的、与请求网页一致的域名</strong>。同时，Cookie依然遵循同源政策，只有用服务器域名设置的Cookie才会上传，其他域名的Cookie并不会上传，且（跨源）原网页代码中的document.cookie也无法读取服务器域名下的Cookie。</p><h1 id="非简单请求"><a href="#非简单请求" class="headerlink" title="非简单请求"></a>非简单请求</h1><h2 id="预检请求"><a href="#预检请求" class="headerlink" title="预检请求"></a>预检请求</h2><p>非简单请求是那种对服务器有特殊要求的请求，比如请求方法是<code>PUT或DELETE</code>，或者<code>Content-Type字段的类型是application/json</code>。<br><strong>非简单请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为”预检”请求（preflight）</strong>。<br>浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些HTTP动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的XMLHttpRequest请求，否则就报错。<br>下面是一段浏览器的JavaScript脚本。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="string">'http://api.alice.com/cors'</span>;</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">'PUT'</span>, url, <span class="literal">true</span>);</span><br><span class="line">xhr.setRequestHeader(<span class="string">'X-Custom-Header'</span>, <span class="string">'value'</span>);</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure></p><p>浏览器发现，这是一个非简单请求，就自动发出一个”预检”请求，要求服务器确认可以这样请求。下面是这个”预检”请求的<code>HTTP头信息</code>。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">OPTIONS /cors HTTP/<span class="number">1.1</span></span><br><span class="line">Origin: http:<span class="comment">//api.bob.com</span></span><br><span class="line">Access-Control-Request-Method: PUT</span><br><span class="line">Access-Control-Request-Headers: X-Custom-Header</span><br><span class="line">Host: api.alice.com</span><br><span class="line">Accept-Language: en-US</span><br><span class="line">Connection: keep-alive</span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span>...</span><br></pre></td></tr></table></figure></p><h3 id="关键字段是Origin"><a href="#关键字段是Origin" class="headerlink" title="关键字段是Origin"></a>关键字段是Origin</h3><p>“预检”请求用的请求方法是<code>OPTIONS</code>，表示这个请求是用来询问的。头信息里面，<code>关键字段是Origin</code>，表示请求来自哪个源。</p><h3 id="除了Origin字段，”预检”请求的头信息包括两个特殊字段。"><a href="#除了Origin字段，”预检”请求的头信息包括两个特殊字段。" class="headerlink" title="除了Origin字段，”预检”请求的头信息包括两个特殊字段。"></a>除了Origin字段，”预检”请求的头信息包括两个特殊字段。</h3><p>（1）<code>Access-Control-Request-Method</code><br>该字段是必须的，用来列出浏览器的CORS请求会用到哪些HTTP方法，上例是PUT。<br>（2）<code>Access-Control-Request-Headers</code><br>该字段是一个逗号分隔的字符串，指定浏览器CORS请求会额外发送的头信息字段，上例是X-Custom-Header。</p><h2 id="预检请求的回应"><a href="#预检请求的回应" class="headerlink" title="预检请求的回应"></a>预检请求的回应</h2><p>服务器收到”预检”请求以后，检查了<code>Origin、Access-Control-Request-Method和Access-Control-Request-Headers</code>字段以后，确认允许跨源请求，就可以做出回应。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Mon, 01 Dec 2008 01:15:39 GMT</span><br><span class="line">Server: Apache/2.0.61 (Unix)</span><br><span class="line">Access-Control-Allow-Origin: http://api.bob.com</span><br><span class="line">Access-Control-Allow-Methods: GET, POST, PUT</span><br><span class="line">Access-Control-Allow-Headers: X-Custom-Header</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Content-Encoding: gzip</span><br><span class="line">Content-Length: 0</span><br><span class="line">Keep-Alive: timeout=2, max=100</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Type: text/plain</span><br></pre></td></tr></table></figure></p><h3 id="Access-Control-Allow-Methods"><a href="#Access-Control-Allow-Methods" class="headerlink" title="Access-Control-Allow-Methods"></a>Access-Control-Allow-Methods</h3><p>该字段必需，它的值是逗号分隔的一个字符串，表明服务器支持的所有跨域请求的方法。注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次”预检”请求。</p><h3 id="Access-Control-Allow-Headers"><a href="#Access-Control-Allow-Headers" class="headerlink" title="Access-Control-Allow-Headers"></a>Access-Control-Allow-Headers</h3><p>如果浏览器请求包括<code>Access-Control-Request-Headers</code>字段，则Access-Control-Allow-Headers字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在”预检”中请求的字段。</p><h3 id="Access-Control-Allow-Credentials-1"><a href="#Access-Control-Allow-Credentials-1" class="headerlink" title="Access-Control-Allow-Credentials"></a>Access-Control-Allow-Credentials</h3><p>该字段与简单请求时的含义相同。</p><h3 id="Access-Control-Max-Age"><a href="#Access-Control-Max-Age" class="headerlink" title="Access-Control-Max-Age"></a>Access-Control-Max-Age</h3><p>该字段可选，用来指定本次预检请求的有效期，单位为秒。上面结果中，有效期是20天（1728000秒），即允许缓存该条回应1728000秒（即20天），在此期间，不用发出另一条预检请求。</p><h3 id="go-gin-cors设置"><a href="#go-gin-cors设置" class="headerlink" title="go-gin cors设置"></a>go-gin cors设置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">router = gin.Default()</span><br><span class="line"></span><br><span class="line">config := cors.DefaultConfig()</span><br><span class="line">config.AllowAllOrigins = true</span><br><span class="line">config.AllowMethods = []string&#123;&quot;GET&quot;, &quot;POST&quot;, &quot;OPTIONS&quot;&#125;</span><br><span class="line">config.AllowHeaders = []string&#123;&quot;DNT&quot;, &quot;X-Mx-ReqToken&quot;, &quot;Keep-Alive&quot;, &quot;User-Agent&quot;, &quot;X-Requested-With&quot;, &quot;If-Modified-Since&quot;, &quot;Cache-Control&quot;, &quot;Content-Type&quot;, &quot;Authorization&quot;, &quot;X-Token&quot;&#125;</span><br><span class="line">router.Use(cors.New(config))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;摘自&lt;a href=&quot;http://www.ruanyifeng.com/blog/2016/04/cors.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;阮老师&lt;/a&gt;&lt;br&gt;CORS是一个W3C标准，全称是”跨域资源
      
    
    </summary>
    
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
      <category term="cors" scheme="http://yoursite.com/tags/cors/"/>
    
  </entry>
  
  <entry>
    <title>论成熟的男银</title>
    <link href="http://yoursite.com/digest/%E8%AE%BA%E6%88%90%E7%86%9F%E7%9A%84%E7%94%B7%E9%93%B6/"/>
    <id>http://yoursite.com/digest/论成熟的男银/</id>
    <published>2018-09-25T09:29:50.980Z</published>
    <updated>2018-10-07T17:42:14.743Z</updated>
    
    <content type="html"><![CDATA[<p>摘自知乎：<a href="https://www.zhihu.com/question/21295246/answer/21828415" target="_blank" rel="noopener">吴遇安</a></p><h1 id="能够解决问题的男人就是成熟的男人"><a href="#能够解决问题的男人就是成熟的男人" class="headerlink" title="能够解决问题的男人就是成熟的男人"></a>能够解决问题的男人就是成熟的男人</h1><p>这个题目看似很容易写，因为每个人都可以有自己对于“成熟”的理解，但答主更崇尚用较为理性的方式来分析这个命题，所以下面，我会尽可能用一种严谨的方式来解构这个命题。</p><p>我们列出了某个界定标准，符合这个标准的，便是“成熟男人”，而这个问题便是在探讨这个标准是什么，其实这个问题下的许多回答中提出的标准，反例都太好举了，一个挖鼻孔的大色狼坂田银时，恐怕难以符合这里的大多数标准，但是难道有人认为他“不成熟”吗？</p><p>再举一个著名的范例<br><strong>君子</strong><br>君子XXX<br>君子应该XXX<br>君子不应该XXX<br>XXX样的人才能算君子</p><p>类似的叙述，占据了我国古代儒家著述的很大一部分，很熟悉吧？古人讨论君子的时候，其实和我们现在讨论成熟男人的情形是一样的，大家都在纷纷说，梨子是水果，苹果是水果，却没能很好的给水果做一个足够精确的描述。<br>本楼中的回答，男人们的大部分都在描述一个<strong>想象中的完美人格，甚至是想象中的自己</strong>（如同古人想象“君子”）<br>而女孩子们的回答，则大多都在描述自己<strong>理想中的爱人形象</strong>。</p><p><strong>须知，这个家伙出现在现实生活中的时候，许多女孩子也会觉得他是成熟男人呢</strong>。<br><img src="https://leanote.com/api/file/getImage?fileId=58d380c5ab64417edb0008ba" alt=""><br>用这样的枚举法得到的结论，我认为并不具有很强的说服力。因此，我在这份回答里，就是希望探讨<strong>一条具有普适效用的标准，以此来界定成熟男人的边界</strong>。</p><p>我们在生活中普遍认同的成熟男人形象，包含了许多的要素，冷静，善良，宽容，等等等等，那么，<strong>到底其中的哪些，才是造成“成熟男人”与“不成熟男人”的根本分界点呢</strong>，成熟男人的定义，对于实践有什么指导意义？</p><p>我以前刷知乎的时候看过一个问题，问“为什么鸡汤文受人讨厌”，下面排名第一的回答叫做“因为没给勺子”。这其实就是本楼中许多答案的问题，只给了一个目标，“<strong>做到XX样就是成熟男人</strong>”，但是，为什么这样就是成熟男人，怎样才能成为成熟男人，对于这两个关键的问题，却没有进行解答，就是典型的“<strong>送汤不送勺</strong>”。而本文，则致力于解析“成熟”的本质，并且给出到达彼岸的路径。</p><p>我得到的答案是：</p><p>成熟与不成熟的根本分界点，在于“<strong>对于规律的理解和运用能力</strong>”</p><p>在对于成熟进行解析之前，我们首先要解决的，是这个问题。<br><strong>成熟的目的是什么？</strong></p><p>不要忽视这一点，成熟往往出现在两种语境之中，一曰”XX性格成熟“，二曰”XX处理某项事务的手法成熟‘，为什么我们追求成熟？因为在我们的想象和实践中，越”成熟（包括性格和处理手法）“，往往代表了<strong>对问题更强的解决能力</strong></p><p>不论这个问题是追求更高的社会地位，更多的财富，更好的处理与他人的关系，更愉悦的生活和心态，或者是与这个世界更和谐地相处。以题目的题主为例，他感慨自己不成熟，其实是在感慨“<strong>处理两性关系的能力不强</strong>”！</p><p>我们说，在某个领域内，张三比李四更成熟，指的是在该领域内，张三比李四有更强的解决问题的能力，而我们说张三比李四的性格更成熟，指的是张三在<strong>多个领域内均具有比李四更强的解决问题的能力</strong>。</p><p>在明了成熟的目的之后，我们接下来研究的，就是，在成熟包含的许多特质之中，<strong>有哪些对于达成这个目的具有最关键的影响</strong>，那么，这个（或者这些）特质就可以<strong>被认定为是决定某人“成熟度”的核心，是区分成熟与幼稚的根本分界点</strong>。</p><p>我们之前探讨的“成熟”，大多是出自对于一个完美人格的想象，这个完美的人格中包涵了许多要素，沉稳，冷静，善良，宽厚，仁爱，温柔，坚强，慷慨，自立，目标明确胸有大志等等等等。那么，如何确定哪一项特质才是区分成熟与幼稚的根本分界点呢？下面，我来介绍一种我本人分析问题时的常用方法，即“去除噪声法”，分为四步</p><p>第一步，收集，<br>收集所有我们对于“成熟”特质的想象，加以总结归纳。<br>第二步，筛选，这许多的特质中，有哪些是<strong>“成熟”特有的</strong>，即“幼稚”的人几乎不可能具备的。<br>第三步，对比，“成熟”的人特有的素质中，<strong>共性在于哪里</strong>。<br>第四步，分析，“成熟”素质的共性，<strong>应当如何锻炼</strong>？</p><p>第一步，收集<br>稳重，善良，冷静，宽厚，目标明确，坚强，勇敢，自立，慷慨，礼貌，低调，智慧，果断，有责任感。<br>统计了这个楼里的三百多个答案，归纳出的特质大致如此，这些素质，如果一个男人具备了，毫无疑问他是成熟的，一个女人要想找到这样的男人，做梦也要笑醒。</p><p>第二步，筛选。<br>在诸多特质中，有一些是“幼稚”的男人也能够拥有的，有一些是并非是“成熟男人”必备的，（例如坂田银时不礼貌，古美门律师。。。算了我不说了。。半泽直树君爱记仇，但是我们也普遍认为这几位都是成熟男人），这些特质，我将在下面列出并加以剔除。<br>善良，幼稚男也可以有，pass 坚强，pass 礼貌，pass 有责任感，pass 勇敢，pass 宽厚，pass慷慨，pass<br>那么剩下的有 稳重 冷静 目标明确 自立 低调 智慧 果断<br>稳重，代表考虑问题全面的能力<br>冷静，代表处变不惊的能力<br>目标明确，低调和自立三种特质可以合并，为图方便，下面均以“自立”代替三者，代表不以物喜，不以己悲，内心抗击外界干扰的能力，清楚自己的需求，并且坚定不移地加以追求智慧，稳重代表考虑问题全面，而智慧则又多了一种素质，能够抓住问题的关键点，果断，代表面临选择时的决断能力。</p><p>第三步，找出共性<br>第二步中提到，这五项素质，是成熟男人必备，也是成熟男人特有的能力，在这个步骤之中，我将解析，这五种素质的核心共性是什么。<br>换句话来说，<strong>你做到了某件事情，就能够自然而然的拥有这五种特质，我的任务就是解析出“这件事情”是什么</strong>。</p><p>如果把团队中的工作分为”智“与”力“（可理解为思考和执行），那么我的属性就是”智“。<br>我曾经不止一次的思考过，“智”与“力”的极限在哪里，“力”的极限，可描述为“专拆南墙”，就像成语故事里无坚不摧的矛，没有捅不穿的防御。<br>而“智”的极限，我认为，是“<strong>预知</strong>”。<br>对于智者而言，<strong>学习和实践都是为了找寻事物发展变化的规律，而找寻规律，则是为了推测日后事物的形态</strong>。<br><strong>因此，“智”的极限，即是“预知”</strong>。</p><p>稳重，冷静，目标明确，智慧，果断。<br>这五种素质都有一个共性，即它们的主人，已经“<strong>知道</strong>”了。<br><strong>曾经经历过，知道接下来会发生什么，并且对可能出现出现的几种结果都做好了准备</strong>。<br>因为他已经“知道”了，所以，自然能够全面的考虑问题<br>因为已经经历过了，所以不会惊慌失措，从而能够处变不惊<br>因为“知道了”，所以能够准确的找出问题的核心<br>因为已经对于各种结果都做好了应对的准备，或者说能够接受失败，所以成熟男人才能果断地下决定<br>成熟男人的目标很明确，不会被外物所扰，因为他已经“<strong>经历过</strong>”，并且“<strong>知道了</strong>”。<br>所以，这五种素质的核心，即在于“<strong>经历</strong>”，和“<strong>知道</strong>”。</p><p>从实践和理论中领悟出规律，并且能够在实践中运用规律，从而获得强大的解决问题的能力，即为成熟。</p><p>成熟区别于幼稚的的核心，即，<strong>对于“规律”的理解和运用</strong>。</p><p><strong>最后，是第四步，应当如何锻炼</strong>。<br>多实践，多读书，多思考。<br>不是烂尾，而是我实在找不到比这九个字更好的词来描述了。<br><strong>主动地去经历事物，积极地从书中和自己的实践中总结规律，思考如何应用规律，就是达到“成熟”彼岸的通道</strong>。</p><p>成熟”从本质上来说，<strong>是一种技能而非性格，性格的养成来源于技能的提升</strong>。我们从小到大被说了那么多年的不成熟，究竟传说中的成熟是什么东西？</p><p>成熟绝不只是停留于高僧，老头子，中年大叔身上的专利，我们更没有必要将之神化，“鸡汤化”，<br>成熟不是性格，只是一种技能，古美门律师在处理案件的时候手法非常成熟，对自己作为律师的“道”达到了坚信不疑的程度，不可不谓之境界高深，但是在处理人际关系的时候态度却不成熟，暴躁，没礼貌，不稳重。银他妈经历了丰富的人生，面对危局处事不惊，战场上白夜叉几度血战来回，却连区区甜食的诱惑也抵挡不了。<br>他们都成熟，他们也都不成熟。</p><p>维特根斯坦说过，说不出来的东西就当它不存在，我认为包括成熟男人在内，好多<strong>我们日常的概念都被过分神化了，明明是可以解析的事情，搞得神神叨叨，令人甚为不爽</strong><br>对我们这些不完美的人来说，要求一个人“成熟”起来，并非要求他“能够解决一切事情”，而是要求他“在总体解决问题的能力上达到他这个年纪的人的均值”。<br>何必急于一时？何必用完美的标准去要求所有人？</p><p>对于我们少年人来说，这几个家伙何尝不是成熟？<br><img src="https://leanote.com/api/file/getImage?fileId=58d38514ab64417edb000935" alt=""></p><p><em>我是要成为海贼王的男人，就算为此而死，也无所谓</em><br>　　　　　　　　　　　　　　　　　　　　　　　———Monkey D Luffy<br><img src="https://leanote.com/api/file/getImage?fileId=58d38546ab64417edb000936" alt=""></p><p><em>因为我是天才</em><br>　　　　　　　　　　　　　　　　　　　　　　　———樱木花道<br>为什么你这么不成熟？<br>因为我是<strong>天才</strong>啊哈哈哈</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;摘自知乎：&lt;a href=&quot;https://www.zhihu.com/question/21295246/answer/21828415&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;吴遇安&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;能够解决问题的男人就是成熟的男
      
    
    </summary>
    
    
      <category term="有趣的灵魂" scheme="http://yoursite.com/tags/%E6%9C%89%E8%B6%A3%E7%9A%84%E7%81%B5%E9%AD%82/"/>
    
  </entry>
  
</feed>
