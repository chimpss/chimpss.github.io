<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>秀才</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chimpss.github.io/"/>
  <updated>2018-10-31T02:29:14.005Z</updated>
  <id>http://chimpss.github.io/</id>
  
  <author>
    <name>chimps</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>修改服务器时间</title>
    <link href="http://chimpss.github.io/linux/time/"/>
    <id>http://chimpss.github.io/linux/time/</id>
    <published>2018-10-31T02:27:28.384Z</published>
    <updated>2018-10-31T02:29:14.005Z</updated>
    
    <content type="html"><![CDATA[<h2 id="修改时间"><a href="#修改时间" class="headerlink" title="修改时间"></a>修改时间</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo date -s <span class="string">"2018-11-02 17:18:10"</span></span><br></pre></td></tr></table></figure><h2 id="恢复时间"><a href="#恢复时间" class="headerlink" title="恢复时间"></a>恢复时间</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ntpdate us.pool.ntp.org</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;修改时间&quot;&gt;&lt;a href=&quot;#修改时间&quot; class=&quot;headerlink&quot; title=&quot;修改时间&quot;&gt;&lt;/a&gt;修改时间&lt;/h2&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
    
      <category term="linux" scheme="http://chimpss.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>国产凌凌漆</title>
    <link href="http://chimpss.github.io/digest/%E5%9B%BD%E4%BA%A7%E5%87%8C%E5%87%8C%E6%BC%86/"/>
    <id>http://chimpss.github.io/digest/国产凌凌漆/</id>
    <published>2018-10-21T02:45:56.336Z</published>
    <updated>2018-10-21T02:47:05.166Z</updated>
    
    <content type="html"><![CDATA[<p>你以为躲起来就找不到你了吗？</p><p>没有用的！</p><p>像你这样出色的男人，无论在什么地方，都像漆黑中的萤火虫一样，那样的鲜明，那样的出众。</p><p>你那忧郁的眼神，稀嘘的胡喳子，神乎其神的刀法，和那杯Dry Martine，都深深地迷住了我。</p><p>不过，虽然这是这样的出色，但是行有行规，无论怎样你要付清昨晚的过夜费呀，叫女人不用给钱吗？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;你以为躲起来就找不到你了吗？&lt;/p&gt;
&lt;p&gt;没有用的！&lt;/p&gt;
&lt;p&gt;像你这样出色的男人，无论在什么地方，都像漆黑中的萤火虫一样，那样的鲜明，那样的出众。&lt;/p&gt;
&lt;p&gt;你那忧郁的眼神，稀嘘的胡喳子，神乎其神的刀法，和那杯Dry Martine，都深深地迷住了我。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="有趣的灵魂" scheme="http://chimpss.github.io/tags/%E6%9C%89%E8%B6%A3%E7%9A%84%E7%81%B5%E9%AD%82/"/>
    
  </entry>
  
  <entry>
    <title>我是那只等爱的狐狸（小王子）</title>
    <link href="http://chimpss.github.io/digest/%E6%88%91%E6%98%AF%E9%82%A3%E5%8F%AA%E7%AD%89%E7%88%B1%E7%9A%84%E7%8B%90%E7%8B%B8/"/>
    <id>http://chimpss.github.io/digest/我是那只等爱的狐狸/</id>
    <published>2018-10-18T12:11:34.570Z</published>
    <updated>2018-10-18T12:18:51.664Z</updated>
    
    <content type="html"><![CDATA[<p>今天在敲代码的时候，无意间听到了一首音乐《before it gets dark》，第一条评论是这样的：“我是那只等爱的狐狸。”</p><p>于是，我找到了这篇文章：</p><p>小王子遇见狐狸，是他正在哭泣的时候。小王子因为难过而邀请狐狸和他一起玩，狐狸拒绝了。</p><p>它说:我不能和你玩，因为我还没有被驯养。</p><p>它说:对我而言，你只不过是个小男孩，象其他千万个小男孩一样。我不需要你。同样你也用不着我。然而，如果你驯养了我，那么我们就互相不可缺少了。对我来说，你就是世界上唯一的了；对你来说,我也将是世界上唯一的了。</p><p>狐狸是执着的。对爱的执着和期待。</p><p>驯养，就是建立某种关系。时常，在遇到一些人的时候，脑子里会突然闪现出”请驯养我吧”。对爱情，或者友情，都是需要条件的，如果你驯养了我，那么我们就在一起吧。</p><p>小王子驯养了那只狐狸。</p><p>狐狸告诉他:你驯养了我，那么我的生命将会充满阳光。你的脚步将会变的和其他人不一样。别人的脚步会让我迅速的躲到地下，而你得脚步声，就象音乐一样，召唤我出洞穴。</p><p>多美好的感觉，如果你被驯养，你的世界将不再是原来的样子。</p><p>当你爱着我，或者当我爱着你的时候，我们的世界，都不会再是原来的样子。我愿意把我的年华送给你当作新年的祝福，如果你愿意收下的话。</p><p>我们不离不弃的牵手一生以后，在生命最后的时光里，你告诉我:请驯养我吧!那将是多么美丽的事情。就算生命正离我们远去，我们的世界依旧是原来的样子。因为我们已经是互相不可缺少的了。</p><p>小王子最终还是离开了狐狸，小王子要对他的玫瑰负责。</p><p>对于狐狸这样的人来说，生命中其实已不是很介意。一定要把什么东西纂在手心。</p><p>小王子说:那你还是什么都没有得到吧?</p><p>狐狸说:你看到那边的麦田没有，我不吃面包，麦子对我来说一点用也没有。我对麦田无动于衷。但是，你有着金黄色的头发。麦子，是金色的，它会使我想起你。而且，我也会喜欢风吹麦浪的声音。</p><p>原来，爱情或者友情。都是不会计较得失的吧。我不在计较过去的或者将来的得失，可能我一直在失去，可是又有谁不曾已经正在或者将要失去些什么呢？从童年的糖果到生命终结时我们的躯体。</p><p>驯养，狐狸，一次又一次的教会我。生命，爱情。执着，以及真诚。</p><p>生命就是这样子被激励着，鼓动着。</p><p>有谁可以象那只狐狸一样，等待爱，认真的有点固执的等待爱。得到以后，欢乐，但是安静的看者小王子离开。</p><p>爱的境界吧，让他快乐就好了。小王子的玫瑰，娇气的玫瑰，也许永远都不会有狐狸的胸襟，可是，它仍旧得到了小王子。或者他没有再回的去，可是那朵玫瑰，依旧是幸福的，至少，小王子曾为她作过挡风的屏障，为她作过玻璃的罩子。</p><p>至少，小王子在最后要离开狐狸时仍说:我要对我的玫瑰负责。</p><p>我觉得揪心。</p><p>我感谢狐狸。于是，在我的生命中，多了一种靠”驯养”建立起来的联系—可能是爱情，也可能是友情，但无论如何，我在去追求的时候，会有这样的心态:我相信，到最后，就算他离开，至少我还会有麦子的颜色。</p><p>我想去追求，因为我想要得到。</p><p>在得到之前，我说我要好好的爱护我所得到的一切，不给他任何的负担。可是得到了以后，欲望象是一条贪婪的蛇，自私，想据为己有。</p><p>也许，爱情本就是自私的。</p><p>我们可以分享的东西很多很多，可是如果我们遇到了什么不能分享的东西，我们会不会反目成仇呢??</p><p>狐狸说:至少，我还有麦子的颜色。金色的麦浪会让我想起你。</p><p>确实，拥有过，我的世界就会变的和过去不一样，因为你来过，我就不会一无所有。至少我还有麦田的颜色。</p><p>有时候，真的不在介意，是否一定要把一些东西纂在手心。</p><p>狐狸一定懂得，小王子是理智的有责任感的，他要对玫瑰负责，毕竟狐狸在遇到小王子的时候，他已经有了玫瑰。</p><p>请驯服我吧!</p><p>我知道,那是爱的声音。</p><p>我是那只等爱的狐狸。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天在敲代码的时候，无意间听到了一首音乐《before it gets dark》，第一条评论是这样的：“我是那只等爱的狐狸。”&lt;/p&gt;
&lt;p&gt;于是，我找到了这篇文章：&lt;/p&gt;
&lt;p&gt;小王子遇见狐狸，是他正在哭泣的时候。小王子因为难过而邀请狐狸和他一起玩，狐狸拒绝了。&lt;/p
      
    
    </summary>
    
    
      <category term="有趣的灵魂" scheme="http://chimpss.github.io/tags/%E6%9C%89%E8%B6%A3%E7%9A%84%E7%81%B5%E9%AD%82/"/>
    
  </entry>
  
  <entry>
    <title>redis编写lua脚本</title>
    <link href="http://chimpss.github.io/lua/redis%E7%BC%96%E5%86%99lua%E8%84%9A%E6%9C%AC/"/>
    <id>http://chimpss.github.io/lua/redis编写lua脚本/</id>
    <published>2018-10-17T11:50:31.867Z</published>
    <updated>2018-10-17T12:11:00.914Z</updated>
    
    <content type="html"><![CDATA[<p>由于redis并没有类似mysql或者mongo的乐观锁机制，并发控制成了一个棘手的问题<br>这块是可以用redis的watch来做，但是如果能实现乐观锁，那就非常方便了</p><h2 id="redis使用lua的基础语法"><a href="#redis使用lua的基础语法" class="headerlink" title="redis使用lua的基础语法"></a>redis使用lua的基础语法</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">eval</span> <span class="string">"return &#123;KEYS[1],KEYS[2],ARGV[1],ARGV[2]&#125;"</span> 2 key1 key2 first second</span><br><span class="line">1) <span class="string">"key1"</span></span><br><span class="line">2) <span class="string">"key2"</span></span><br><span class="line">3) <span class="string">"first"</span></span><br><span class="line">4) <span class="string">"second"</span></span><br></pre></td></tr></table></figure><h2 id="lua可以调用的redis函数"><a href="#lua可以调用的redis函数" class="headerlink" title="lua可以调用的redis函数"></a>lua可以调用的redis函数</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis.call()</span><br><span class="line">redis.<span class="built_in">pcall</span>()</span><br></pre></td></tr></table></figure><h2 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> version = redis.call(<span class="string">"INCR"</span>, KEYS[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">if</span> version == <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">    redis.call(<span class="string">"EXPIRE"</span>, KEYS[<span class="number">2</span>], ARGV[<span class="number">3</span>])</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">tostring</span>(version) ~= ARGV[<span class="number">2</span>] <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="number">-1</span>, version&#125;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">return</span> redis.call(<span class="string">"SET"</span>, KEYS[<span class="number">1</span>], ARGV[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>运行方式：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli EVAL <span class="string">"<span class="variable">$(cat ./helloWorld.lua)</span>"</span> 3 mykey version1 expire 1 1 100</span><br></pre></td></tr></table></figure></p><h2 id="redis并发控制"><a href="#redis并发控制" class="headerlink" title="redis并发控制"></a>redis并发控制</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SaveAtomic 并发控制save 默认versionExpire为30秒</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *RedisDB)</span> <span class="title">SaveAtomic</span><span class="params">(key <span class="keyword">string</span>, val <span class="keyword">interface</span>&#123;&#125;, versionKey <span class="keyword">string</span>, versionVal <span class="keyword">int</span>, versionExpire <span class="keyword">int</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> versionExpire == <span class="number">0</span> &#123;</span><br><span class="line">versionExpire = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line">storeValue, err := db.getStoreValue(val)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">conn := db.Option.Pool.Get()</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"><span class="keyword">if</span> err = conn.Err(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">script := <span class="string">`</span></span><br><span class="line"><span class="string">local version = redis.call("INCR", KEYS[2])</span></span><br><span class="line"><span class="string">if version == 1 then</span></span><br><span class="line"><span class="string">    redis.call("EXPIRE", KEYS[2], ARGV[3])</span></span><br><span class="line"><span class="string">end;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if tostring(version) ~= ARGV[2] then</span></span><br><span class="line"><span class="string">    return &#123;-1, version&#125;</span></span><br><span class="line"><span class="string">end;</span></span><br><span class="line"><span class="string">return redis.call("SET", KEYS[1], ARGV[1])</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">getScript := redis.NewScript(<span class="number">3</span>, script)</span><br><span class="line">res, err := redis.String(getScript.Do(conn, key, versionKey, <span class="string">"expire"</span>, storeValue, versionVal, versionExpire))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">utils.Error(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> res == <span class="string">"-1"</span> &#123;</span><br><span class="line"><span class="comment">//err = ErrConflict</span></span><br><span class="line">&#125;redis</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h2><p><a href="https://redisbook.readthedocs.io/en/latest/feature/scripting.html" target="_blank" rel="noopener">Redis 命令参考 · lua 脚本</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于redis并没有类似mysql或者mongo的乐观锁机制，并发控制成了一个棘手的问题&lt;br&gt;这块是可以用redis的watch来做，但是如果能实现乐观锁，那就非常方便了&lt;/p&gt;
&lt;h2 id=&quot;redis使用lua的基础语法&quot;&gt;&lt;a href=&quot;#redis使用lua的
      
    
    </summary>
    
    
      <category term="lua" scheme="http://chimpss.github.io/tags/lua/"/>
    
      <category term="redis" scheme="http://chimpss.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>goland 快捷键</title>
    <link href="http://chimpss.github.io/ide/goland%20%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://chimpss.github.io/ide/goland 快捷键/</id>
    <published>2018-10-17T08:58:16.867Z</published>
    <updated>2018-10-17T08:58:55.917Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mac键盘符号和修饰键说明"><a href="#Mac键盘符号和修饰键说明" class="headerlink" title="Mac键盘符号和修饰键说明"></a>Mac键盘符号和修饰键说明</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">⌘ Command</span><br><span class="line">⇧ Shift</span><br><span class="line">⌥ Option</span><br><span class="line">⌃ Control</span><br><span class="line">↩︎ Return/Enter</span><br><span class="line">⌫ Delete</span><br><span class="line">⌦ 向前删除键（Fn+Delete）</span><br><span class="line">↑ 上箭头</span><br><span class="line">↓ 下箭头</span><br><span class="line">← 左箭头</span><br><span class="line">→ 右箭头</span><br><span class="line">⇞ Page Up（Fn+↑）</span><br><span class="line">⇟ Page Down（Fn+↓）</span><br><span class="line">Home Fn + ←</span><br><span class="line">End Fn + →</span><br><span class="line">⇥ 右制表符（Tab键）</span><br><span class="line">⇤ 左制表符（Shift+Tab）</span><br><span class="line">⎋ Escape (Esc)</span><br></pre></td></tr></table></figure><h3 id="一、Editing（编辑）"><a href="#一、Editing（编辑）" class="headerlink" title="一、Editing（编辑）"></a>一、Editing（编辑）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">Control + Space 基本的代码补全（补全任何类、方法、变量）</span><br><span class="line">Control + Shift + Space 智能代码补全（过滤器方法列表和变量的预期类型）</span><br><span class="line">Command + Shift + Enter 自动结束代码，行末自动添加分号</span><br><span class="line">Command + P 显示方法的参数信息</span><br><span class="line">Control + J 快速查看文档</span><br><span class="line">Shift + F1 查看外部文档（在某些代码上会触发打开浏览器显示相关文档）</span><br><span class="line">Command + 鼠标放在代码上 显示代码简要信息</span><br><span class="line">Command + F1 在错误或警告处显示具体描述信息</span><br><span class="line">Command + N, Control + Enter, Control + N 生成代码（getter、setter、构造函数、hashCode/equals,toString）</span><br><span class="line">Control + O 覆盖方法（重写父类方法）</span><br><span class="line">Control + I 实现方法（实现接口中的方法）</span><br><span class="line">Command + Option + T 包围代码（使用if..else, try..catch, for, synchronized等包围选中的代码）</span><br><span class="line">Command + / 注释/取消注释与行注释</span><br><span class="line">Command + Option + / 注释/取消注释与块注释</span><br><span class="line">Option + 方向键上 连续选中代码块</span><br><span class="line">Option + 方向键下 减少当前选中的代码块</span><br><span class="line">Control + Shift + Q 显示上下文信息</span><br><span class="line">Option + Enter 显示意向动作和快速修复代码</span><br><span class="line">Command + Option + L 格式化代码</span><br><span class="line">Control + Option + O 优化import</span><br><span class="line">Control + Option + I 自动缩进线</span><br><span class="line">Tab / Shift + Tab 缩进代码 / 反缩进代码</span><br><span class="line">Command + X 剪切当前行或选定的块到剪贴板</span><br><span class="line">Command + C 复制当前行或选定的块到剪贴板</span><br><span class="line">Command + V 从剪贴板粘贴</span><br><span class="line">Command + Shift + V 从最近的缓冲区粘贴</span><br><span class="line">Command + D 复制当前行或选定的块</span><br><span class="line">Command + Delete 删除当前行或选定的块的行</span><br><span class="line">Control + Shift + J 智能的将代码拼接成一行</span><br><span class="line">Command + Enter 智能的拆分拼接的行</span><br><span class="line">Shift + Enter 开始新的一行</span><br><span class="line">Command + Shift + U 大小写切换</span><br><span class="line">Command + Shift + ] / Command + Shift + [ 选择直到代码块结束/开始</span><br><span class="line">Option + Fn + Delete 删除到单词的末尾</span><br><span class="line">Option + Delete 删除到单词的开头</span><br><span class="line">Command + 加号 / Command + 减号 展开 / 折叠代码块</span><br><span class="line">Command + Shift + 加号 展开所以代码块</span><br><span class="line">Command + Shift + 减号 折叠所有代码块</span><br><span class="line">Command + W 关闭活动的编辑器选项卡</span><br></pre></td></tr></table></figure><h3 id="二、Search-Replace（查询-替换）"><a href="#二、Search-Replace（查询-替换）" class="headerlink" title="二、Search/Replace（查询/替换）"></a>二、Search/Replace（查询/替换）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Double Shift 查询任何东西</span><br><span class="line">Command + F 文件内查找</span><br><span class="line">Command + G 查找模式下，向下查找</span><br><span class="line">Command + Shift + G 查找模式下，向上查找</span><br><span class="line">Command + R 文件内替换</span><br><span class="line">Command + Shift + F 全局查找（根据路径）</span><br><span class="line">Command + Shift + R 全局替换（根据路径）</span><br><span class="line">Command + Shift + S 查询结构（Ultimate Edition 版专用，需要在Keymap中设置）</span><br><span class="line">Command + Shift + M 替换结构（Ultimate Edition 版专用，需要在Keymap中设置）</span><br></pre></td></tr></table></figure><h3 id="三、Usage-Search（使用查询）"><a href="#三、Usage-Search（使用查询）" class="headerlink" title="三、Usage Search（使用查询）"></a>三、Usage Search（使用查询）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Option + F7 / Command + F7 在文件中查找用法 / 在类中查找用法</span><br><span class="line">Command + Shift + F7 在文件中突出显示的用法</span><br><span class="line">Command + Option + F7 显示用法</span><br></pre></td></tr></table></figure><h3 id="四、Compile-and-Run（编译和运行）"><a href="#四、Compile-and-Run（编译和运行）" class="headerlink" title="四、Compile and Run（编译和运行）"></a>四、Compile and Run（编译和运行）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Command + F9 编译Project</span><br><span class="line">Command + Shift + F9 编译选择的文件、包或模块</span><br><span class="line">Control + Option + R 弹出 Run 的可选择菜单</span><br><span class="line">Control + Option + D 弹出 Debug 的可选择菜单</span><br><span class="line">Control + R 运行</span><br><span class="line">Control + D 调试</span><br><span class="line">Control + Shift + R, Control + Shift + D 从编辑器运行上下文环境配置</span><br></pre></td></tr></table></figure><h3 id="五、Debugging（调试）"><a href="#五、Debugging（调试）" class="headerlink" title="五、Debugging（调试）"></a>五、Debugging（调试）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">F8 进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</span><br><span class="line">F7 进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</span><br><span class="line">Shift + F7 智能步入，断点所在行上有多个方法调用，会弹出进入哪个方法</span><br><span class="line">Shift + F8 跳出</span><br><span class="line">Option + F9 运行到光标处，如果光标前有其他断点会进入到该断点</span><br><span class="line">Option + F8 计算表达式（可以更改变量值使其生效）</span><br><span class="line">Command + Option + R 恢复程序运行，如果该断点下面代码还有断点则停在下一个断点上</span><br><span class="line">Command + F8 切换断点（若光标当前行有断点则取消断点，没有则加上断点）</span><br><span class="line">Command + Shift + F8 查看断点信息</span><br></pre></td></tr></table></figure><h3 id="六、Navigation（导航）"><a href="#六、Navigation（导航）" class="headerlink" title="六、Navigation（导航）"></a>六、Navigation（导航）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Command + O 查找类文件</span><br><span class="line">Command + Shift + O 查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠/</span><br><span class="line">Command + Option + O 前往指定的变量 / 方法</span><br><span class="line">Control + 方向键左 / Control + 方向键右 左右切换打开的编辑tab页</span><br><span class="line">F12 返回到前一个工具窗口</span><br><span class="line">Esc 从工具窗口进入代码文件窗口</span><br><span class="line">Shift + Esc 隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口</span><br><span class="line">Command + Shift + F4 关闭活动run/messages/find/... tab</span><br><span class="line">Command + L 在当前文件跳转到某一行的指定处</span><br><span class="line">Command + E 显示最近打开的文件记录列表</span><br><span class="line">Option + 方向键左 / Option + 方向键右 光标跳转到当前单词 / 中文句的左 / 右侧开头位置</span><br><span class="line">Command + Option + 方向键左 / Command + Option + 方向键右 退回 / 前进到上一个操作的地方</span><br><span class="line">Command + Shift + Delete 跳转到最后一个编辑的地方</span><br><span class="line">Option + F1 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的Finder)</span><br><span class="line">Command + B / Command + 鼠标点击 进入光标所在的方法/变量的接口或是定义处</span><br><span class="line">Command + Option + B 跳转到实现处，在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口</span><br><span class="line">Option + Space, Command + Y 快速打开光标所在方法、类的定义</span><br><span class="line">Control + Shift + B 跳转到类型声明处</span><br><span class="line">Command + U 前往当前光标所在方法的父类的方法 / 接口定义</span><br><span class="line">Control + 方向键下 / Control + 方向键上 当前光标跳转到当前文件的前一个/后一个方法名位置</span><br><span class="line">Command + ] / Command + [ 移动光标到当前所在代码的花括号开始/结束位置</span><br><span class="line">Command + F12 弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）</span><br><span class="line">Control + H 显示当前类的层次结构</span><br><span class="line">Command + Shift + H 显示方法层次结构</span><br><span class="line">Control + Option + H 显示调用层次结构</span><br><span class="line">F2 / Shift + F2 跳转到下一个/上一个突出错误或警告的位置</span><br><span class="line">F4 / Command + 方向键下 编辑/查看代码源</span><br><span class="line">Option + Home 显示到当前文件的导航条</span><br><span class="line">F3选中文件/文件夹/代码行，添加/取消书签</span><br><span class="line">Option + F3 选中文件/文件夹/代码行，使用助记符添加/取消书签</span><br><span class="line">Control + 0...Control + 9 定位到对应数值的书签位置</span><br><span class="line">Command + F3 显示所有书签</span><br></pre></td></tr></table></figure><h3 id="七、Refactoring（重构）"><a href="#七、Refactoring（重构）" class="headerlink" title="七、Refactoring（重构）"></a>七、Refactoring（重构）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">F5 复制文件到指定目录</span><br><span class="line">F6 移动文件到指定目录</span><br><span class="line">Command + Delete 在文件上为安全删除文件，弹出确认框</span><br><span class="line">Shift + F6 重命名文件</span><br><span class="line">Command + F6 更改签名</span><br><span class="line">Command + Option + N 一致性</span><br><span class="line">Command + Option + M 将选中的代码提取为方法</span><br><span class="line">Command + Option + V 提取变量</span><br><span class="line">Command + Option + F 提取字段</span><br><span class="line">Command + Option + C 提取常量</span><br><span class="line">Command + Option + P 提取参数</span><br></pre></td></tr></table></figure><h3 id="八、VCS-Local-History（版本控制-本地历史记录）"><a href="#八、VCS-Local-History（版本控制-本地历史记录）" class="headerlink" title="八、VCS/Local History（版本控制/本地历史记录）"></a>八、VCS/Local History（版本控制/本地历史记录）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Command + K 提交代码到版本控制器</span><br><span class="line">Command + T 从版本控制器更新代码</span><br><span class="line">Option + Shift + C 查看最近的变更记录</span><br><span class="line">Control + C 快速弹出版本控制器操作面板</span><br></pre></td></tr></table></figure><h3 id="九、Live-Templates（动态代码模板）"><a href="#九、Live-Templates（动态代码模板）" class="headerlink" title="九、Live Templates（动态代码模板）"></a>九、Live Templates（动态代码模板）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Command + Option + J 弹出模板选择窗口，将选定的代码使用动态模板包住</span><br><span class="line">Command + J 插入自定义动态代码模板</span><br></pre></td></tr></table></figure><h3 id="十、General（通用）"><a href="#十、General（通用）" class="headerlink" title="十、General（通用）"></a>十、General（通用）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Command + 1...Command + 9 打开相应编号的工具窗口</span><br><span class="line">Command + S 保存所有</span><br><span class="line">Command + Option + Y 同步、刷新</span><br><span class="line">Control + Command + F 切换全屏模式</span><br><span class="line">Command + Shift + F12 切换最大化编辑器</span><br><span class="line">Option + Shift + F 添加到收藏夹</span><br><span class="line">Option + Shift + I 检查当前文件与当前的配置文件</span><br><span class="line">Control + ` 快速切换当前的scheme（切换主题、代码样式等）</span><br><span class="line">Command + , 打开IDEA系统设置</span><br><span class="line">Command + ; 打开项目结构对话框</span><br><span class="line">Shift + Command + A 查找动作（可设置相关选项）</span><br><span class="line">Control + Shift + Tab 编辑窗口标签和工具窗口之间切换（如果在切换的过程加按上delete，则是关闭对应选中的窗口）</span><br></pre></td></tr></table></figure><h3 id="十一、Other（一些官方文档上没有体现的快捷键）"><a href="#十一、Other（一些官方文档上没有体现的快捷键）" class="headerlink" title="十一、Other（一些官方文档上没有体现的快捷键）"></a>十一、Other（一些官方文档上没有体现的快捷键）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Command + Shift +8 竖编辑模式</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Mac键盘符号和修饰键说明&quot;&gt;&lt;a href=&quot;#Mac键盘符号和修饰键说明&quot; class=&quot;headerlink&quot; title=&quot;Mac键盘符号和修饰键说明&quot;&gt;&lt;/a&gt;Mac键盘符号和修饰键说明&lt;/h2&gt;&lt;figure class=&quot;highlight plai
      
    
    </summary>
    
    
      <category term="ide" scheme="http://chimpss.github.io/tags/ide/"/>
    
      <category term="mac" scheme="http://chimpss.github.io/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>文件操作</title>
    <link href="http://chimpss.github.io/python/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <id>http://chimpss.github.io/python/文件操作/</id>
    <published>2018-10-17T08:56:55.895Z</published>
    <updated>2018-10-17T08:58:12.615Z</updated>
    
    <content type="html"><![CDATA[<h3 id="判断是文件还是文件夹"><a href="#判断是文件还是文件夹" class="headerlink" title="判断是文件还是文件夹"></a>判断是文件还是文件夹</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">if os.path.isdir(path):</span><br><span class="line">    print &quot;it&apos;s a directory&quot;</span><br><span class="line">elif os.path.isfile(path):</span><br><span class="line">    print &quot;it&apos;s a normal file&quot;</span><br><span class="line">else:</span><br><span class="line">    print &quot;it&apos;s a special file(socket,FIFO,device file)&quot;</span><br></pre></td></tr></table></figure><h3 id="判断文件是否存在"><a href="#判断文件是否存在" class="headerlink" title="判断文件是否存在"></a>判断文件是否存在</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line"> </span><br><span class="line">&gt;&gt;&gt; os.path.exists(&apos;d:/assist&apos;)</span><br><span class="line"> True</span><br><span class="line">&gt;&gt;&gt; os.path.exists(&apos;d:/assist/getTeacherList.py&apos;)</span><br><span class="line"> True</span><br></pre></td></tr></table></figure><h3 id="获取文件大小"><a href="#获取文件大小" class="headerlink" title="获取文件大小"></a>获取文件大小</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line"> </span><br><span class="line">os.path.getsize(path)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;判断是文件还是文件夹&quot;&gt;&lt;a href=&quot;#判断是文件还是文件夹&quot; class=&quot;headerlink&quot; title=&quot;判断是文件还是文件夹&quot;&gt;&lt;/a&gt;判断是文件还是文件夹&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
    
      <category term="python" scheme="http://chimpss.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>性能监控</title>
    <link href="http://chimpss.github.io/mongodb/%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7/"/>
    <id>http://chimpss.github.io/mongodb/性能监控/</id>
    <published>2018-10-17T08:53:49.597Z</published>
    <updated>2018-10-17T08:55:05.132Z</updated>
    
    <content type="html"><![CDATA[<p>拿阿里云MongoDB举例</p><h2 id="mongotop"><a href="#mongotop" class="headerlink" title="mongotop"></a>mongotop</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongotop -h dds-****.mongodb.rds.aliyuncs.com:3717 -u root -p **** --authenticationDatabase admin 10</span><br></pre></td></tr></table></figure><h2 id="mongostat"><a href="#mongostat" class="headerlink" title="mongostat"></a>mongostat</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mongostat -h dds-****.mongodb.rds.aliyuncs.com:3717 -u root -p **** --authenticationDatabase admin</span><br><span class="line">mongostat --host 100.100.100.100 -u root -p **** --authenticationDatabase admin</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;拿阿里云MongoDB举例&lt;/p&gt;
&lt;h2 id=&quot;mongotop&quot;&gt;&lt;a href=&quot;#mongotop&quot; class=&quot;headerlink&quot; title=&quot;mongotop&quot;&gt;&lt;/a&gt;mongotop&lt;/h2&gt;&lt;figure class=&quot;highlight pla
      
    
    </summary>
    
    
      <category term="mongo" scheme="http://chimpss.github.io/tags/mongo/"/>
    
  </entry>
  
  <entry>
    <title>命令行参数</title>
    <link href="http://chimpss.github.io/linux/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0/"/>
    <id>http://chimpss.github.io/linux/命令行参数/</id>
    <published>2018-10-17T08:46:00.327Z</published>
    <updated>2018-10-17T08:46:26.661Z</updated>
    
    <content type="html"><![CDATA[<h2 id="特殊变量列表"><a href="#特殊变量列表" class="headerlink" title="特殊变量列表"></a>特殊变量列表</h2><ol><li>$0    当前脚本的文件名</li><li>$n    传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是$2。</li><li>$#    传递给脚本或函数的参数个数。</li><li>$*    传递给脚本或函数的所有参数。</li><li>$@    传递给脚本或函数的所有参数。被双引号(“ “)包含时，与 $* 稍有不同，下面将会讲到。</li><li>$?    上个命令的退出状态，或函数的返回值。</li><li>$$    当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID。</li></ol><h2 id="和-的区别"><a href="#和-的区别" class="headerlink" title="$* 和 $@ 的区别"></a>$* 和 $@ 的区别</h2><p>$* 和 $@ 都表示传递给函数或脚本的所有参数，不被双引号(“ “)包含时，都以”$1” “$2” … “$n” 的形式输出所有参数。</p><p>但是当它们被双引号(“ “)包含时，”$*” 会将所有的参数作为一个整体，以”$1 $2 … $n”的形式输出所有参数；”$@” 会将各个参数分开，以”$1” “$2” … “$n” 的形式输出所有参数。</p><p>下面的例子可以清楚的看到 $* 和 $@ 的区别：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"\$*="</span> $*</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"\"\$*\"="</span> <span class="string">"$*"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"\$@="</span> <span class="variable">$@</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"\"\$@\"="</span> <span class="string">"<span class="variable">$@</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"print each param from \$*"</span></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> $*</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$var</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"print each param from \$@"</span></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> <span class="variable">$@</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$var</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"print each param from \"\$*\""</span></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> <span class="string">"$*"</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$var</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"print each param from \"\$@\""</span></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> <span class="string">"<span class="variable">$@</span>"</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$var</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></p><p>执行 ./test.sh “a” “b” “c” “d”，看到下面的结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$*=  a b c d</span><br><span class="line">&quot;$*&quot;= a b c d</span><br><span class="line">$@=  a b c d</span><br><span class="line">&quot;$@&quot;= a b c d</span><br><span class="line">print each param from $*</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">d</span><br><span class="line">print each param from $@</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">d</span><br><span class="line">print each param from &quot;$*&quot;</span><br><span class="line">a b c d</span><br><span class="line">print each param from &quot;$@&quot;</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">d</span><br></pre></td></tr></table></figure></p><h2 id="退出状态"><a href="#退出状态" class="headerlink" title="退出状态"></a>退出状态</h2><p>$? 可以获取上一个命令的退出状态。所谓退出状态，就是上一个命令执行后的返回结果。</p><p>退出状态是一个数字，一般情况下，大部分命令执行成功会返回 0，失败返回 1。</p><p>不过，也有一些命令返回其他值，表示不同类型的错误。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;特殊变量列表&quot;&gt;&lt;a href=&quot;#特殊变量列表&quot; class=&quot;headerlink&quot; title=&quot;特殊变量列表&quot;&gt;&lt;/a&gt;特殊变量列表&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;$0    当前脚本的文件名&lt;/li&gt;
&lt;li&gt;$n    传递给脚本或函数的参数。n 是一个数
      
    
    </summary>
    
    
      <category term="linux" scheme="http://chimpss.github.io/tags/linux/"/>
    
      <category term="shell" scheme="http://chimpss.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>清除本地所有修改</title>
    <link href="http://chimpss.github.io/git/git%20%E6%B8%85%E9%99%A4%E6%9C%AC%E5%9C%B0%E6%89%80%E6%9C%89%E4%BF%AE%E6%94%B9/"/>
    <id>http://chimpss.github.io/git/git 清除本地所有修改/</id>
    <published>2018-10-17T08:43:28.086Z</published>
    <updated>2018-10-17T08:44:20.201Z</updated>
    
    <content type="html"><![CDATA[<p>本地修改了许多文件，其中有些是新增的，因为开发需要这些都不要了，想要丢弃掉，可以使用如下命令：</p><h2 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git checkout . #本地所有修改的。没有的提交的，都返回到原来的状态</span><br><span class="line">git stash #把所有没有提交的修改暂存到stash里面。可用git stash pop回复。</span><br><span class="line">git reset --hard HASH #返回到某个节点，不保留修改。</span><br><span class="line">git reset --soft HASH #返回到某个节点。保留修改</span><br><span class="line"></span><br><span class="line">git clean -df #返回到某个节点</span><br><span class="line">git clean 参数</span><br><span class="line">    -n 显示 将要 删除的 文件 和  目录</span><br><span class="line">    -f 删除 文件</span><br><span class="line">    -df 删除 文件 和 目录</span><br></pre></td></tr></table></figure><h2 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout . &amp;&amp; git clean -xdf</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本地修改了许多文件，其中有些是新增的，因为开发需要这些都不要了，想要丢弃掉，可以使用如下命令：&lt;/p&gt;
&lt;h2 id=&quot;方案1&quot;&gt;&lt;a href=&quot;#方案1&quot; class=&quot;headerlink&quot; title=&quot;方案1&quot;&gt;&lt;/a&gt;方案1&lt;/h2&gt;&lt;figure class=
      
    
    </summary>
    
    
      <category term="git" scheme="http://chimpss.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>多账号</title>
    <link href="http://chimpss.github.io/git/%E5%A4%9A%E8%B4%A6%E5%8F%B7/"/>
    <id>http://chimpss.github.io/git/多账号/</id>
    <published>2018-10-17T08:42:37.327Z</published>
    <updated>2018-10-17T08:43:07.684Z</updated>
    
    <content type="html"><![CDATA[<p>首先说一下账号切换</p><p>首先我现在有一个github账号叫<code>A</code>,但是我现在不想用这个账号了，于是我在github上面重新申请了一个账号叫<code>B</code>，我在B账号下新建了一个仓库，然后使用命令行上传我的本地代码出现以下错误<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">remote: Permission to B/test.git denied to A</span><br><span class="line">fatal: unable to access &apos;https://github.com/B/test/&apos;: The requested eror: 403</span><br></pre></td></tr></table></figure></p><p>原因是Mac电脑上的钥匙串，每次我们设置好用户名和密码都会自动存储到Mac的钥匙串上面，每次使用命令行上传代码的时候，Mac会自动填充A账号和密码</p><p><strong>这时候我只需要打开钥匙串，然后搜索git，把有关Github的账号密码都删除掉。就可以</strong></p><p>此处省略1万字的草泥马。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先说一下账号切换&lt;/p&gt;
&lt;p&gt;首先我现在有一个github账号叫&lt;code&gt;A&lt;/code&gt;,但是我现在不想用这个账号了，于是我在github上面重新申请了一个账号叫&lt;code&gt;B&lt;/code&gt;，我在B账号下新建了一个仓库，然后使用命令行上传我的本地代码出现以下错误&lt;b
      
    
    </summary>
    
    
      <category term="git" scheme="http://chimpss.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Programming in Lua摘录</title>
    <link href="http://chimpss.github.io/digest/%E7%A2%A7%E8%A1%80%E5%89%91/"/>
    <id>http://chimpss.github.io/digest/碧血剑/</id>
    <published>2018-10-16T12:11:26.170Z</published>
    <updated>2018-10-16T12:12:57.294Z</updated>
    
    <content type="html"><![CDATA[<p>“袁承志知道若再谦逊，那就是瞧人不起，展开五行拳，发拳当胸打去。荣彩和旁观三人本来都以为他武功有独到之秘，哪知使出来的竟是武林中最寻常不过的五行拳。</p><p>敌对三人登时意存轻视，温青脸上不自禁露出失望的神色。</p><p>“荣彩心中暗喜，双拳如风，连抢三下攻势，满拟自己的大力魔爪手江南独步，三四招之间就可破去对方五行拳，那知袁承志轻描淡写的一一化解。再拆数招，荣彩暗暗吃惊，原来对方所使虽是极寻常的拳术，但每一招均是含劲不吐，意在拳先，举手抬足 之间隐含极浑厚的内力。”</p><p>——金庸《碧血剑》</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;“袁承志知道若再谦逊，那就是瞧人不起，展开五行拳，发拳当胸打去。荣彩和旁观三人本来都以为他武功有独到之秘，哪知使出来的竟是武林中最寻常不过的五行拳。&lt;/p&gt;
&lt;p&gt;敌对三人登时意存轻视，温青脸上不自禁露出失望的神色。&lt;/p&gt;
&lt;p&gt;“荣彩心中暗喜，双拳如风，连抢三下攻势，满
      
    
    </summary>
    
    
      <category term="有趣的灵魂" scheme="http://chimpss.github.io/tags/%E6%9C%89%E8%B6%A3%E7%9A%84%E7%81%B5%E9%AD%82/"/>
    
  </entry>
  
  <entry>
    <title>峰终定律</title>
    <link href="http://chimpss.github.io/digest/%E5%B3%B0%E7%BB%88%E5%AE%9A%E5%BE%8B/"/>
    <id>http://chimpss.github.io/digest/峰终定律/</id>
    <published>2018-10-16T03:54:43.418Z</published>
    <updated>2018-10-16T03:59:04.055Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>诺贝尔奖得主，心理学家DanielKahneman，经过深入研究，发现对体验的记忆由两个因素决定：高峰（无论是正向的还是负向的）时与结束时的感觉，这就是峰终定律（Peak-EndRule）。这条定律基于潜意识总结体验的特点：对一项事物的体验之后，所能记住的就只是在峰与终时的体验，而在过程中好与不好体验的比重、好与不好体验的时间长短，对记忆差不多没有影响。而这里的“峰”与“终”其实这就是所谓的“关键时刻MOT”，MOT(MomentofTruth)是服务界最具震撼力与影响力的管理概念与行为模式</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>一批人去做直肠检查的时候，分成两批人做实验</p><p>第一批人将器械放入直肠检查10分钟，病人忍受艰难的10分钟，然后立刻拔出</p><p>第二批人将器械放入直肠检查10分钟，病人忍受艰难的10分钟，医生出去办事，忘了拔出来了，等回来之后才拔出来，病人在痛苦中逐渐麻木。</p><p>事后询问这两批人，如果下次生病还要不要做这种检查。</p><p>第二批人的态度普遍比第一批人好一些，表示愿意接受这种检查方式。</p><p>这就是典型的峰终定律</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;诺贝尔奖得主，心理学家DanielKahneman，经过深入研究，发现对体验的记忆由两个因素决定：高峰（无论是正向的还是负向的）时与结束时的
      
    
    </summary>
    
    
      <category term="有趣的灵魂" scheme="http://chimpss.github.io/tags/%E6%9C%89%E8%B6%A3%E7%9A%84%E7%81%B5%E9%AD%82/"/>
    
  </entry>
  
  <entry>
    <title>名词记录</title>
    <link href="http://chimpss.github.io/digest/%E5%90%8D%E8%AF%8D/"/>
    <id>http://chimpss.github.io/digest/名词/</id>
    <published>2018-10-16T03:46:37.174Z</published>
    <updated>2018-10-16T03:47:12.833Z</updated>
    
    <content type="html"><![CDATA[<h2 id="名词："><a href="#名词：" class="headerlink" title="名词："></a>名词：</h2><p>峰终效应<br>小数定律<br>舒适的环境很容易让人用第一种方式思考问题，就像押韵的诗，印刷良好的书<br>沉锚效应<br>回归效应<br>事前验尸，过度乐观，规划谬误</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;名词：&quot;&gt;&lt;a href=&quot;#名词：&quot; class=&quot;headerlink&quot; title=&quot;名词：&quot;&gt;&lt;/a&gt;名词：&lt;/h2&gt;&lt;p&gt;峰终效应&lt;br&gt;小数定律&lt;br&gt;舒适的环境很容易让人用第一种方式思考问题，就像押韵的诗，印刷良好的书&lt;br&gt;沉锚效应&lt;br&gt;回归效应
      
    
    </summary>
    
    
      <category term="有趣的灵魂" scheme="http://chimpss.github.io/tags/%E6%9C%89%E8%B6%A3%E7%9A%84%E7%81%B5%E9%AD%82/"/>
    
  </entry>
  
  <entry>
    <title>思考·快与慢摘录</title>
    <link href="http://chimpss.github.io/digest/%E6%80%9D%E8%80%83%C2%B7%E5%BF%AB%E4%B8%8E%E6%85%A2/"/>
    <id>http://chimpss.github.io/digest/思考·快与慢/</id>
    <published>2018-10-16T03:44:23.614Z</published>
    <updated>2018-10-16T03:53:05.415Z</updated>
    
    <content type="html"><![CDATA[<h2 id="两个思维系统"><a href="#两个思维系统" class="headerlink" title="两个思维系统"></a>两个思维系统</h2><p>在我们的大脑中，存在着两个思维系统，丹尼尔·卡尼曼命名它们为系统1（快思考）和系统2（慢思考）。</p><h3 id="系统1"><a href="#系统1" class="headerlink" title="系统1"></a>系统1</h3><p>系统1 就像大脑的自动反应模式，会根据生活经验总结无数下意识反应的套路，使生活简化，让我们不必每天早上起来都思考一遍如何套上衣服、扣纽扣、拧开牙膏盖、挤牙膏……</p><p>系统1把生活中的很多事情都变成可一键执行的自动程序，节省我们日常生活中的脑力损耗。</p><p>系统1也能够察觉一些简单的关系，比如“这两个杯子的外型是一样的”、“哥哥比弟弟高一点”……但是它无法处理多个独立话题。</p><p>它可以快速反应出“2+7=9”，但是遇到“27×56=？”这类复杂的问题就会立地蒙圈儿，无法给出答案，而所有令它蒙圈儿的事情，就会移交给系统2处理。</p><h3 id="系统2"><a href="#系统2" class="headerlink" title="系统2"></a>系统2</h3><p>系统2接到系统1的求助后，就将大脑的注意力分配到系统1碰到的难题上，集中精神处理该问题。</p><p>值得注意的是，系统2的所有运作都需要集中注意力，一旦注意力分散，运作也会随之中断。</p><p>就像你在散步的时候可以天马行空地随便想一些东西，但如果此时有人请你解决一个复杂的问题，比如“请用5分钟浏览这本书并概括书籍主旨”，此时你往往会发现自己散步的脚停了下来。</p><p>因为人的注意力是有限的，系统2会将它们优先使用在当前遇到的难题之上，同样的道理，假如你以极快的步速散步，你也会发现因为需要更快辨别更多眼前转换的景物，你就无法同时在脑中盘算事情。</p><p>系统2十分谨慎，具有推理能力，它也可以处理多重任务，这就决定了通过系统2运作得出的结论往往更靠谱。</p><h3 id="系统1和系统2的协作"><a href="#系统1和系统2的协作" class="headerlink" title="系统1和系统2的协作"></a>系统1和系统2的协作</h3><p>如上文所述，我们知道，当某样事物令系统1蒙圈儿，违反了系统1熟悉的模式，系统2会被激活。这告诉我们：系统2是非常懒惰的，它通常不会主动干预系统1的工作，除非系统1发出求助。</p><p>而系统1是全天候24小时在线，且无法关闭的。这就决定了我们在处理事情的时候，总是系统1先出面，而不能绕过系统1直接面对系统2。因此当系统1认为自己可以处理问题并给出答案时，就没有系统2什么事了。</p><p>这种配合模式使它们的协作非常高效，能花最少力气解决问题的绝不多费一分脑力。</p><p>而系统1也很善于完成自己的本职工作：它在熟悉的情境中采用的套路是精确的，所作出的短期预测是准确的，遇到挑战时做出的第一反应也是迅速且基本恰当的。但是它也因经验而存在成见，因此经常犯错。</p><p>系统2也负责抑制系统1因直觉反应产生的冲动，一个典型的例子就是每个人应该都有过强忍着不诅咒别人去死的经历。但它通常的做法是不加验证地同意系统1的解决方案。</p><p>并且，根据心理学家的多项实验证明，当系统2在忙着处理某些难题时，系统1更容易把控人的行为。</p><p>——这些就导致我们做出的很多决策其实都是依赖系统1的直觉反应，而不是经过系统2的理性分析与计算的——但对于这点，我们甚至都一无所知。</p><h2 id="大脑思考机制引发的心理学效应"><a href="#大脑思考机制引发的心理学效应" class="headerlink" title="大脑思考机制引发的心理学效应"></a>大脑思考机制引发的心理学效应</h2><p>由于系统1和系统2的这种运作模式，导致我们常跟着直觉走而不自知，心理学家们为这些非理性决策而着迷，在经过了大量的实验研究后，他们发现了诸多建立在直觉思维上的有趣现象：</p><h3 id="曝光效应"><a href="#曝光效应" class="headerlink" title="曝光效应"></a>曝光效应</h3><p>系统1对出现过的人、事、物会产生熟悉感，然后根据这种熟悉感作出判断。</p><p>因系统1的熟悉感，我们所产生的对此物或此事放松的感觉就是认知放松。</p><p>当某个人、某句话、某样事物频繁出现，反复在我们面前曝光自己，就会引发认知放松，进而更容易被判定为可信的。</p><p>这种只要经常出现就能增加喜欢程度的现象就被叫做曝光效应，或者纯粹接触效应。</p><h3 id="沉锚效应"><a href="#沉锚效应" class="headerlink" title="沉锚效应"></a>沉锚效应</h3><p>沉锚效应，心理学名词，指的是人们在对某人某事做出判断时，易受第一印象或第一信息支配，就像沉入海底的锚一样把人们的思想固定在某处。作为一种心理现象，沉锚效应普遍存在于生活的方方面面。第一印象和先入为主是其在社会生活中的表现形式。</p><p>通常来讲，人们在作决策时，思维往往会被得到的第一信息所左右，就像沉入海底的锚一样，把你的思维固定在某处。而用一个限定性的词语或规定作行为导向，达成行为效果的心理效应，被称为“沉锚效应”。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;两个思维系统&quot;&gt;&lt;a href=&quot;#两个思维系统&quot; class=&quot;headerlink&quot; title=&quot;两个思维系统&quot;&gt;&lt;/a&gt;两个思维系统&lt;/h2&gt;&lt;p&gt;在我们的大脑中，存在着两个思维系统，丹尼尔·卡尼曼命名它们为系统1（快思考）和系统2（慢思考）。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="有趣的灵魂" scheme="http://chimpss.github.io/tags/%E6%9C%89%E8%B6%A3%E7%9A%84%E7%81%B5%E9%AD%82/"/>
    
  </entry>
  
  <entry>
    <title>索引</title>
    <link href="http://chimpss.github.io/mysql/index/"/>
    <id>http://chimpss.github.io/mysql/index/</id>
    <published>2018-10-16T03:25:02.781Z</published>
    <updated>2018-10-16T03:51:19.832Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查询索引"><a href="#查询索引" class="headerlink" title="查询索引"></a>查询索引</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> &#123;<span class="keyword">INDEX</span> | <span class="keyword">INDEXES</span> | <span class="keyword">KEYS</span>&#125;</span><br><span class="line">    &#123;<span class="keyword">FROM</span> | <span class="keyword">IN</span>&#125; tbl_name</span><br><span class="line">    [&#123;<span class="keyword">FROM</span> | <span class="keyword">IN</span>&#125; db_name]</span><br><span class="line">    [<span class="keyword">WHERE</span> expr]</span><br></pre></td></tr></table></figure><p>例子：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">INDEX</span> <span class="keyword">FROM</span> mydb.mytable;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> authority;</span><br></pre></td></tr></table></figure></p><p>字段较多时，竖着看更清晰<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">INDEX</span> <span class="keyword">FROM</span> mydb.mytable\G;</span><br></pre></td></tr></table></figure></p><h2 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h2><p>直通车：<a href="https://dev.mysql.com/doc/refman/5.7/en/create-index.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/create-index.html</a><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">UNIQUE</span> | FULLTEXT | SPATIAL] <span class="keyword">INDEX</span> index_name</span><br><span class="line">    [index_type]</span><br><span class="line">    <span class="keyword">ON</span> tbl_name (key_part,...)</span><br><span class="line">    [index_option]</span><br><span class="line">    [algorithm_option | lock_option] ...</span><br><span class="line"></span><br><span class="line">key_part:</span><br><span class="line">    col_name [(<span class="keyword">length</span>)] [<span class="keyword">ASC</span> | <span class="keyword">DESC</span>]</span><br><span class="line"></span><br><span class="line">index_option:</span><br><span class="line">    KEY_BLOCK_SIZE [=] <span class="keyword">value</span></span><br><span class="line">  | index_type</span><br><span class="line">  | <span class="keyword">WITH</span> PARSER parser_name</span><br><span class="line">  | <span class="keyword">COMMENT</span> <span class="string">'string'</span></span><br><span class="line"></span><br><span class="line">index_type:</span><br><span class="line">    <span class="keyword">USING</span> &#123;BTREE | <span class="keyword">HASH</span>&#125;</span><br><span class="line"></span><br><span class="line">algorithm_option:</span><br><span class="line">    ALGORITHM [=] &#123;<span class="keyword">DEFAULT</span> | INPLACE | COPY&#125;</span><br><span class="line"></span><br><span class="line">lock_option:</span><br><span class="line">    <span class="keyword">LOCK</span> [=] &#123;<span class="keyword">DEFAULT</span> | <span class="keyword">NONE</span> | <span class="keyword">SHARED</span> | EXCLUSIVE&#125;</span><br></pre></td></tr></table></figure></p><p>例子：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> id_index <span class="keyword">ON</span> lookup (<span class="keyword">id</span>) <span class="keyword">USING</span> BTREE;</span><br></pre></td></tr></table></figure></p><h2 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h2><p>语法使用的alert，比较复杂，这儿只放一个链接<br><a href="https://dev.mysql.com/doc/refman/5.7/en/alter-table.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/alter-table.html</a></p><p>例子：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> authority <span class="keyword">drop</span> <span class="keyword">index</span> UQE_authority_page;</span><br></pre></td></tr></table></figure></p><h2 id="联合索引"><a href="#联合索引" class="headerlink" title="联合索引"></a>联合索引</h2><p>联合索引又叫复合索引。对于复合索引:Mysql从左到右的使用索引中的字段，一个查询可以只使用索引中的一部份，但只能是最左侧部分。例如索引是key index (a,b,c). 可以支持a | a,b| a,b,c 3种组合进行查找，但不支持 b,c进行查找 .当最左侧字段是常量引用时，索引就十分有效。</p><p>例子：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> authority;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> authority <span class="keyword">drop</span> <span class="keyword">index</span> UQE_authority_page;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">index</span> UQE_authority_page <span class="keyword">on</span> authority(company_id,page);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;查询索引&quot;&gt;&lt;a href=&quot;#查询索引&quot; class=&quot;headerlink&quot; title=&quot;查询索引&quot;&gt;&lt;/a&gt;查询索引&lt;/h2&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://chimpss.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>拼接新的变量名</title>
    <link href="http://chimpss.github.io/linux/eval/"/>
    <id>http://chimpss.github.io/linux/eval/</id>
    <published>2018-10-16T02:56:40.061Z</published>
    <updated>2018-10-16T03:16:35.407Z</updated>
    
    <content type="html"><![CDATA[<p>##shell变量作为另一个变量名</p><p>使用eval<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">i=1</span><br><span class="line"><span class="built_in">eval</span> <span class="built_in">echo</span> <span class="string">'$'</span>rediscache<span class="variable">$i</span></span><br></pre></td></tr></table></figure></p><h2 id="例1："><a href="#例1：" class="headerlink" title="例1："></a>例1：</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dev@pirate-test:~chimps (master *%) $ i=1                                                                                                              </span><br><span class="line">dev@pirate-test:~chimps (master *%) $ <span class="built_in">eval</span> <span class="built_in">echo</span> <span class="string">'$'</span>rediscache<span class="variable">$i</span></span><br><span class="line">10.100.100.100</span><br></pre></td></tr></table></figure><h2 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line">for ((i = 1; i &lt; 60; i++)); do</span><br><span class="line">redis=$(eval echo &apos;$&apos;rediscache$i)</span><br><span class="line">count=$(redis-cli -h $redis -a ***** DEL key1)</span><br><span class="line">echo &#123;idx:,$i,redis:,$redis,count:,$count&#125;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##shell变量作为另一个变量名&lt;/p&gt;
&lt;p&gt;使用eval&lt;br&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span c
      
    
    </summary>
    
    
      <category term="linux" scheme="http://chimpss.github.io/tags/linux/"/>
    
      <category term="shell" scheme="http://chimpss.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>优秀一点点</title>
    <link href="http://chimpss.github.io/digest/%E5%BC%82%E7%B1%BB%E6%91%98%E5%BD%95/"/>
    <id>http://chimpss.github.io/digest/异类摘录/</id>
    <published>2018-10-11T14:32:35.445Z</published>
    <updated>2018-10-11T14:37:43.037Z</updated>
    
    <content type="html"><![CDATA[<p>在社会学领域，所谓成功就是“优势积累”的结果。</p><p>职业冰球队员一开始只比最初所在球队的队友好一点点，然而这微小的优势带来的机遇，扩大了他和那些队友之间的差距，随后差距与机会交替发挥作用，微小的差距被越拉越大——最终被选中的队员成了真正出众的天才。</p><p>由此可以看出，天才并非一开始就表现出众，一开始他只是比别人优秀那么一点点。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在社会学领域，所谓成功就是“优势积累”的结果。&lt;/p&gt;
&lt;p&gt;职业冰球队员一开始只比最初所在球队的队友好一点点，然而这微小的优势带来的机遇，扩大了他和那些队友之间的差距，随后差距与机会交替发挥作用，微小的差距被越拉越大——最终被选中的队员成了真正出众的天才。&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
      <category term="有趣的灵魂" scheme="http://chimpss.github.io/tags/%E6%9C%89%E8%B6%A3%E7%9A%84%E7%81%B5%E9%AD%82/"/>
    
  </entry>
  
  <entry>
    <title>承认病态的自我</title>
    <link href="http://chimpss.github.io/digest/%E5%B0%91%E6%9C%89%E4%BA%BA%E8%B5%B0%E7%9A%84%E8%B7%AF2/"/>
    <id>http://chimpss.github.io/digest/少有人走的路2/</id>
    <published>2018-10-11T14:31:21.832Z</published>
    <updated>2018-10-16T03:47:31.406Z</updated>
    
    <content type="html"><![CDATA[<p>承认病态的自我需要勇气，佛教有一句名言：海无边，回头是岸</p><p>圣人改变的是自己，走的是一条修行的路。通过完善自己，可以感召别人，唤醒别人的良知，给别人指引。</p><p>与之相反，由于大恶之人害怕改变自己，所以便去改变别人，他们不择手段去控制别人，压制别人，甚至毁灭别人的生命。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;承认病态的自我需要勇气，佛教有一句名言：海无边，回头是岸&lt;/p&gt;
&lt;p&gt;圣人改变的是自己，走的是一条修行的路。通过完善自己，可以感召别人，唤醒别人的良知，给别人指引。&lt;/p&gt;
&lt;p&gt;与之相反，由于大恶之人害怕改变自己，所以便去改变别人，他们不择手段去控制别人，压制别人，甚至
      
    
    </summary>
    
    
      <category term="有趣的灵魂" scheme="http://chimpss.github.io/tags/%E6%9C%89%E8%B6%A3%E7%9A%84%E7%81%B5%E9%AD%82/"/>
    
  </entry>
  
  <entry>
    <title>放弃自由</title>
    <link href="http://chimpss.github.io/digest/%E5%B0%91%E6%9C%89%E4%BA%BA%E8%B5%B0%E7%9A%84%E8%B7%AF1/"/>
    <id>http://chimpss.github.io/digest/少有人走的路1/</id>
    <published>2018-10-11T14:29:52.839Z</published>
    <updated>2018-10-16T03:47:25.991Z</updated>
    
    <content type="html"><![CDATA[<p>今天读的一章为：过分依赖集体，个人的心智就会退化</p><p>推理很到位：</p><p>“自然赋予人自由意志，也就是赋予了人自主选择的权利。人生是有一个接一个的选择组成的，不同的选择导致不同的人生。但是不可否认的是，伴随着自主选择，人也就多了更多的烦恼和痛苦。选择是一件令人烦恼和痛苦的事情。首先选择意味着放弃。选择一条路，意味着放弃其他的路；有了一个选择，意味着要放弃其他选择。由于人们不愿意放弃，所以每当面临选择时，内心总是充满烦恼和痛苦。其次，选择会产生结果，人们必须为自己的选择负责，并承受选择所带来的结果。当然，好的结果令人欣喜，但坏的结果不仅会招致别人的指责、埋怨，也会让自己陷入懊恼和自责之中，令人痛苦不堪。许多人不愿意承受选择所带来的痛苦，便会把自主选择的权利拱手让给他人。这就是弗洛姆所说的逃避自由。</p><p>逃避自由的人放弃了自主选择的权利，也就放弃了独立思考的能力，这意味着他们将失去独立的自我，失去自己的灵魂。一个没有灵魂的人就像一张破碎的纸片，盲目地追随着每一阵风，完全失去了掌控自我的能力，最终会成为魔鬼撒旦的工具，干出许多邪恶的事情。”</p><p>我感觉说的很对，想想和以前和朋友一块儿的时候，有什么事情都是让对方做选择，虽然会让别人会觉得你随和，为他人着想。实际上是自己太多胆小，不敢承担选择所带来的风险。是因为怕，才放弃了自主思考的权利，给人一种没有底气，没有底线的感觉。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天读的一章为：过分依赖集体，个人的心智就会退化&lt;/p&gt;
&lt;p&gt;推理很到位：&lt;/p&gt;
&lt;p&gt;“自然赋予人自由意志，也就是赋予了人自主选择的权利。人生是有一个接一个的选择组成的，不同的选择导致不同的人生。但是不可否认的是，伴随着自主选择，人也就多了更多的烦恼和痛苦。选择是一件
      
    
    </summary>
    
    
      <category term="有趣的灵魂" scheme="http://chimpss.github.io/tags/%E6%9C%89%E8%B6%A3%E7%9A%84%E7%81%B5%E9%AD%82/"/>
    
  </entry>
  
  <entry>
    <title>人性的弱点摘录</title>
    <link href="http://chimpss.github.io/digest/%E4%BA%BA%E6%80%A7%E7%9A%84%E5%BC%B1%E7%82%B9/"/>
    <id>http://chimpss.github.io/digest/人性的弱点/</id>
    <published>2018-10-11T14:28:41.639Z</published>
    <updated>2018-10-16T03:47:35.336Z</updated>
    
    <content type="html"><![CDATA[<p>在与人相处时，要切记：与我们交往的不是纯粹按道理或逻辑生活的人，而是充满了感情的，带有偏见、傲慢和虚荣的人。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在与人相处时，要切记：与我们交往的不是纯粹按道理或逻辑生活的人，而是充满了感情的，带有偏见、傲慢和虚荣的人。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="有趣的灵魂" scheme="http://chimpss.github.io/tags/%E6%9C%89%E8%B6%A3%E7%9A%84%E7%81%B5%E9%AD%82/"/>
    
  </entry>
  
</feed>
